/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiEdittask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from './logo';
import { IItem, IPage } from './interface';
import * as $ from "jquery";
import * as fs from 'fs';
// import * as JSZip from 'jszip';
// import * as JSZipUtils from 'jszip-utils';
import * as FileSaver from 'file-saver';
// import * as downloadi from "images-downloader";
// import * as request from 'request';
import * as JSZipUtils from "./jszip-utils.js";
import * as JSZipUtilsMin from "./jszip-utils.min.js";
//import * as saveas from "./FileSaver.js";
import * as JSZip from "./jszip.js";
import * as jsPDF from "jspdf";
import * as helper from "./helpers.js";
import * as ReactToPrint from "react-to-print";
import * as Cheerio from "cheerio";
import 'bootstrap';
import Config from '../config/config';

declare const PhotoSphereViewer: any;

export interface IProps {
    page: IPage;
    updatePage: (page: IPage, next?: () => void) => void;
    history: any;
}

export interface IState {

}

class PageGhotiEdittask extends React.Component<IProps, IState> {
    count = 0;
    state = {
        //page:null,
        Address: '',
        Area: '',
        BillTo: '',
        City: '',
        CompletionDate: '',
        Desc: '',
        Invoice: '',
        DueDate: '',
        InvoiceDate: '',
        Item: [],
        LBNum: '',
        Note: '',
        Stage: '',
        StartDate: '',
        Stories: '',
        TotalCost: '',
        TotalImage: 0,
        Year: '',
        AssetNum: '',
        uploadLink: '',
        Tax: '',
        Before: [],
        During: [],
        After: [],
        Username: [],
        alluser: [],
        TaskStatus: '',
        Client: ''

        //data: [],
    };


    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTaskById?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //let test: IPage=JSON.parse(result.toString);
                // console.log(test);
                console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ Address: result.Address });
                this.setState({ Area: result.Area });
                this.setState({ BillTo: result.BillTo });
                this.setState({ City: result.City });
                this.setState({ CompletionDate: result.CompletionDate });
                this.setState({ Desc: result.Desc });
                this.setState({ Invoice: result.Invoice });
                this.setState({ DueDate: result.DueDate });
                this.setState({ InvoiceDate: result.InvoiceDate });
                this.setState({ Item: result.ItemList });
                this.setState({ LBNum: result.KeyCode });
                this.setState({ Note: result.Note });
                this.setState({ Stage: result.Stage });
                this.setState({ StartDate: result.StartDate });
                this.setState({ Stories: result.Stories });
                this.setState({ TotalCost: result.TotalCost });
                this.setState({ TotalImage: result.TotalImage });
                this.setState({ Year: result.Year });
                this.setState({ AssetNum: result.asset_num });
                this.setState({ uploadLink: result.upload_link });
                this.setState({ Tax: result.Tax });
                this.setState({ Username: result.Username });
                this.setState({ Client: result.Client });
                this.setState({ TaskStatus: result.TaskStatus });
                // console.log(result.Username);
                //this.setState({ })                


            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=before',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                // console.log(JSON.stringify(result));
                this.setState({ Before: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=during',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ During: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=after',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ After: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllUsers',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.setState({ alluser: result });
            }).bind(this),
        });
        //this.mentionSave();

    }

    public componentWillUnmount() {
        //clearInterval();
    }

    public constructor(props) {
        super(props);
        this.submitTask = this.submitTask.bind(this);
        this.changeStatus = this.changeStatus.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.showTable = this.showTable.bind(this);
        this.readJson = this.readJson.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.changeStage2 = this.changeStage2.bind(this);
        this.showCurrStage = this.showCurrStage.bind(this);
        this.showProcess = this.showProcess.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.downloadBefore = this.downloadBefore.bind(this);
        this.downloadAfter = this.downloadAfter.bind(this);
        this.downloadDuring = this.downloadDuring.bind(this);
        this.addItem = this.addItem.bind(this);
        this.submitStage = this.submitStage.bind(this);
        this.deleteItem = this.deleteItem.bind(this);
        this.confirmDel = this.confirmDel.bind(this);
        this.printPDF = this.printPDF.bind(this);
        this.initItem = this.initItem.bind(this);
        this.addaddItem = this.addaddItem.bind(this);
        this.mapItem = this.mapItem.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.exportJson = this.exportJson.bind(this);
        this.addBeforePicture = this.addBeforePicture.bind(this);
        this.addDuringPicture = this.addDuringPicture.bind(this);
        this.addAfterPicture = this.addAfterPicture.bind(this);
        this.showStage = this.showStage.bind(this);
        this.changeWindow = this.changeWindow.bind(this);
        this.UserChange = this.UserChange.bind(this);
        this.findUserByName = this.findUserByName.bind(this);
        this.addWHP = this.addWHP.bind(this);
        this.importHTML = this.importHTML.bind(this);
        this.downloadwtfBefore = this.downloadwtfBefore.bind(this);
        this.downloadwtfAfter = this.downloadwtfAfter.bind(this);
        this.downloadwtfDuring = this.downloadwtfDuring.bind(this);
        this.convert360 = this.convert360.bind(this);

    }


    public render() {
        // let tax: number = 0;
        // let taxTotal: number = 0;
        // let total: number = 0;
        // for (let i of this.state.Item) {
        //     total += (i.Amount ? i.Amount : 0);
        //     if (i.taxable) {
        //         taxTotal += (i.Amount ? i.Amount : 0);
        //     }
        // }
        // tax = taxTotal * (parseInt(this.state.Tax) ? parseInt(this.state.Tax) : 0) * 0.01;
        // total += tax;
        let taxTotal = 0;
        let TotalAmount = 0;
        for(let i of this.state.Item){
            TotalAmount+=(i.Amount?i.Amount:0);
            taxTotal+=(i.Tax?i.Tax:0);
        }
        
        
        return (
            <div className="main">
                <div className="title">
                    <div style={{
                        display: 'flex',
                        height: '100px',
                        alignItems: 'center',
                        width: '100%'
                    }}>
                        <img src={logo} alt="logo" style={{
                            width: '70px',
                            height: '50px',
                        }} />
                        <div style={{
                            flex: 1,
                            paddingLeft: '10px',
                            paddingTop: '20px',
                            display: 'inline',
                            fontSize: '20px',
                            color: 'darkblue',
                            fontWeight: 'bold',
                        }}>
                            Repair and Preservation Network, LLC
            </div>
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '20px',
                            textAlign: 'center',
                            width: '30%'

                        }}>
                            <input type="text" id="myInput" placeholder="Search for Addr.." title="Search Task" />
                        </div> */}
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '10px',
                            textAlign: 'right',
                        }}>
                            <button className='link' title='Log out' onClick={this.logout}><ins>Log Out</ins></button>
                        </div> */}
                    </div>
                </div>
                {/* <div className="space">
                    <div style={{
                        alignItems: 'center',
                        textAlign: 'center',
                        marginTop: '10px',
                        width: '100%',
                    }}>
                        Welcome to Repair and Preservation Network Company!
            </div> */}
                {/* </div> */}
                <div className="menu">
                    <div style={{
                        margin: '15px',
                    }}>
                        <button className="link" title="View Task" onClick={this.changeStatus}><ins>View Task</ins></button>
                    </div>
                    {/* <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Add Task" onClick={this.addTask}><ins>Add Task</ins></button>
                    </div> */}
                </div>
                {this.showOperation()}
                {this.showEdit()}
                

                {this.showTable(taxTotal, TotalAmount)}
                {/* <div id='show' className='page'>
                    {this.showTable()}

                </div> */}
                {window.onbeforeunload = (function () {
                    return "asd"
                })}
            </div>

        );
    }

    protected showOperation(){
        if(localStorage.getItem("Authority")==='3'){
            return
        }
        else{
            return(
                <div style={{
                    backgroundColor: "silver"
                }}>
                    <div style={{
                        marginLeft: '10px',
                        // marginTop: '10px',
                        marginBottom: '10px',
                        // backgroundColor:"silver",
                        // marginRight: "10px",

                        fontSize: '14px',
                    }}><button
                        style={{
                            // paddingTop: '20px',
                            // marginTop: '10px',
                            // marginLeft: '10px',
                            // backgroundColor:"silver",
                            marginRight: '10px',
                            width: '60px',
                            height: '25px',
                            fontSize: '14px',

                        }}
                        title="Submit Task" onClick={this.submitTask}><ins>Submit</ins></button>
                        {this.showStage()}
                        <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '60px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="download before" onClick={this.downloadBefore}>Before</button>
                        <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '60px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="download during" onClick={this.downloadDuring}>During</button>
                        <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '60px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="download after" onClick={this.downloadAfter}>After</button>
                        <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '85px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="ADD WHP" onClick={this.addWHP}>AddWHP</button>
                            {/* <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '85px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="ADD WHP" onClick={this.downloadwtfBefore}>WTFBefore</button>
                            <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '85px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="ADD WHP" onClick={this.downloadwtfDuring}>WTFDuring</button>
                            <button
                            style={{
                                // paddingTop: '20px',
                                // marginTop: '10px',
                                marginLeft: '10px',
                                width: '85px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="ADD WHP" onClick={this.downloadwtfAfter}>WTFAfter</button> */}
                        {/* <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                        }}
                        title="additem" onClick={this.addItem}>AddItem</button>
                    <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                        }}
                        title="delitem" onClick={this.deleteItem}>DelItem</button> */}
                        {/* <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                            fontSize: '14px',
                        }}
                        title="delitem" onClick={this.printPDF}>PrintPDF</button> */}
                        <button
                            style={{
                                // paddingTop: '20px',
                                marginTop: '5px',
                                marginLeft: '10px',
                                width: '85px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                            title="ExportJson" onClick={this.exportJson}>ExportJson</button>
                    </div>
                    <div style={{ marginLeft: "10px" }}>Import JSON:<input
                        style={{
                            marginTop: '5px',
                            marginLeft: '10px',
                            fontSize: '14px',


                        }}
                        type="file" id="fileUpload" onChange={(e) => { this.handleChange(e.target.files) }} /></div>
                    <div style={{ marginLeft: "10px" }}>Import HTML:<input
                        style={{
                            marginTop: '10px',
                            marginLeft: '10px',
                            fontSize: '14px',


                        }}
                        type="file" id="htmlUpload" onChange={(e) => { this.importHTML(e.target.files) }} /></div>
                </div>
            )
        }
    }

    protected downloadwtfBefore(){

    }

    protected downloadwtfDuring(){

    }

    protected downloadwtfAfter(){
        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        
        var zip = new JSZip();
        var urls = this.state.After;
        for(let i=0;i<urls.length;i++){
            while(urls[i].includes("+")){
                urls[i].replace("+","%20");
            }
        }
        console.log(urls);
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });
        var add = this.state.Address
        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, add + "-After.zip");
                
            }, function (e) {
                
            });

        return false;
    }

    protected showEdit(){
        if(localStorage.getItem("Authority")==='3'){
            return
        }
        else{
            return(
                <div className='edit'>

                <div style={{
                    marginLeft: "10px",
                    marginTop: "10px"
                }}>

                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Property Address</span>
                        <input type="text" className="form-control" placeholder="Address" aria-label="Property Address" aria-describedby="basic-addon1"
                            id='propaddr' value={this.state.Address}
                            onChange={e => this.AddrChange(e.target.value)} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Asset Number</span>
                        <input type="text" className="form-control" placeholder="Asset Number" aria-label="Asset Number" aria-describedby="basic-addon1"
                            id='assetnumber' value={this.state.AssetNum}
                            onChange={e => this.AssetChange(e.target.value)} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Invoice Number</span>
                        <input type="text" className="form-control" placeholder="Invoice Number" aria-label="Invoice Number" aria-describedby="basic-addon1"
                            id='invoicenumber' value={this.state.Invoice}
                            onChange={e => { this.setState({ Invoice: e.target.value }) }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Start Date</span>
                        <input type="date" className="form-control" placeholder="StartDate" aria-label="StartDate" aria-describedby="basic-addon1"
                            id='startdate' value={this.state.StartDate}
                            onChange={e => this.StartDChange(e.target.value)} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Due Date</span>
                        <input type="date" className="form-control" placeholder="DueDate" aria-label="DueDate" aria-describedby="basic-addon1"
                            id='duedate' value={this.state.DueDate}
                            onChange={e => this.IDateChange(e.target.value)} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Complete Date</span>
                        <input type="date" className="form-control" placeholder="CompletionDate" aria-label="CompletionDate" aria-describedby="basic-addon1"
                            id='completiondate' value={this.state.CompletionDate}
                            onChange={e => {
                                this.setState({ CompletionDate: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Invoice Date</span>
                        <input type="date" className="form-control" placeholder="InvoiceDate" aria-label="InvoiceDate" aria-describedby="basic-addon1"
                            id='invoicedate' value={this.state.InvoiceDate}
                            onChange={e => {
                                this.setState({ InvoiceDate: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>City/State/Zip Code</span>
                        <input type="text" className="form-control" placeholder="city/zip code" aria-label="City" aria-describedby="basic-addon1"
                            id='city' value={this.state.City}
                            onChange={e => {
                                this.setState({ City: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Lock Box Number</span>
                        <input type="text" className="form-control" placeholder="lockboxnumber" aria-label="LockBoxNumber" aria-describedby="basic-addon1"
                            id='city' value={this.state.LBNum}
                            onChange={e => {
                                this.setState({ LBNum: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Client</span>
                        <input type="text" className="form-control" placeholder="client..." aria-label="Client" aria-describedby="basic-addon1"
                            id='client' value={this.state.Client}
                            onChange={e => {
                                this.setState({ Client: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "100px"
                            // fontSize:'13px'
                        }}>Note</span>
                        <textarea className="form-control" placeholder="Noteeeeeeeeeeeee..." aria-label="Note" aria-describedby="basic-addon1"
                            id='city' value={this.state.Note}
                            onChange={e => {
                                this.setState({ Note: e.target.value });
                            }} style={{
                                color: "black",
                                width: "100%",
                                height: "100px",
                                resize: "none"
                            }}
                        ></textarea>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Tax</span>
                        <input type="text" className="form-control" placeholder="Enter Tax Please..." aria-label="Tax" aria-describedby="basic-addon1"
                            id='tax' value={this.state.Tax}
                            onChange={e => {
                                this.setState({ Tax: e.target.value });
                                let tempi = this.state.Item;
                                for (let i = 0; i < tempi.length; i++) {
                                    tempi[i].Tax = parseFloat((tempi[i].Qty * tempi[i].PPU * (parseFloat(e.target.value) / 100)).toFixed(2));

                                    tempi[i].Amount = parseFloat((parseFloat(tempi[i].Tax) + parseFloat(tempi[i].Cost)).toFixed(2));
                                    // console.log(tempi[i].Amount);

                                }
                                this.setState({ Item: tempi });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>BillTo</span>
                        <input type="text" className="form-control" placeholder="bill to..." aria-label="BillTo" aria-describedby="basic-addon1"
                            id='billto' value={this.state.BillTo}
                            onChange={e => {
                                this.setState({ BillTo: e.target.value });
                            }} style={{ color: "black" }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "100px"
                            // fontSize:'13px'
                        }}>Description</span>
                        <textarea className="form-control" placeholder="Description..." aria-label="Description" aria-describedby="basic-addon1"
                            id='city' value={this.state.Desc}
                            onChange={e => {
                                this.setState({ Desc: e.target.value });
                            }} style={{
                                color: "black",
                                width: "100%",
                                height: "100px",
                                resize: "none"
                            }}
                        ></textarea>
                    </div>
                </div>

                <div id="myModal" className="modal">
                    <div className="modal-content">
                        <span className="close">&times;</span>
                        <table>
                            <tr><td style={{ width: '20%' }}>UserToRemove</td><td>{this.state.Username[parseInt(this.state.Stage)]}</td></tr>
                            <tr><td style={{ width: '20%' }}>StageTo</td> <td>{this.showCurrStage()}</td></tr>
                            <tr><td style={{ width: '20%' }}>UserToSet</td><td><select id='setUser'>
                                {this.state.alluser.map(function (item, key) {
                                    return (
                                        <option>{item.Firstname}</option>
                                    )
                                }.bind(this))}
                            </select></td> </tr>

                        </table>
                        <button style={{
                            marginLeft: "10px",
                            marginTop: "10px",
                            width: "80px",
                            height: "35px"
                        }}
                            title="sbmit" onClick={this.submitStage}>Submit</button>
                    </div>
                </div>
                <div id="sphere" className="sphere">
                    <div className="sphere-content">
                        <span className="closep">&times;</span>
                        <div id="spherepic" style={{
                            width:"100%",
                            height:"90%"
                        }}></div>
                        
                    </div>
                </div>
                {/* <div id="myModal2" className="modal">
                    <div className="modal-content">
                        <span className="close">&times;</span>
                        <table>
                            <tr>Category <input className="text" id='delcate' /></tr>
                            <tr>Item <input className="text" id='delitem' /></tr>

                        </table>
                        <button title="submit" onClick={this.confirmDel}>Submit</button>
                    </div>
                </div> */}
                {this.state.Item.map(this.mapItem)}
                <button style={{
                    marginTop: '10px',
                    marginLeft: '10px',
                    width: '430px',
                    height: '27px',
                    fontSize: '14px',
                }} onClick={this.addaddItem} title="add item">AddItem</button>
            </div>
            )
        }
    }

    protected getInner(element) {
        let stuffs = [];
        let buffer = {
            After: [],
            Amount: 0,
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: '',
            Comments: '',
            Item: 1,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,
            Before: []
        }
        let next = 0;
        for (let i = 0; i < element.length; i++) {
            if (next === 6) {
                next = 0;
                stuffs.push(buffer);
                buffer = {
                    After: [],
                    Amount: 0,
                    During: [],
                    Process: '0',
                    Status: '0',
                    Tax: 0,
                    Taxable: true,
                    description: '',
                    Cate: '',
                    Comments: '',
                    Item: 1,
                    Qty: 0,
                    UM: '',
                    PPU: 0,
                    Cost: 0,
                    Before: []
                };
            }
            let current = element.eq(i).text();
            // console.log(current);
            switch (next) {
                case 0:
                    let num: number = parseFloat(current);
                    if (num && current.length <= 3) {
                        buffer.Item = num;
                        next++;
                    } else {
                        if (stuffs.length > 0 && current.trim().substring(0, 1) !== '$' && current.trim().substring(0, 10) !== 'Area Total') {
                            stuffs[stuffs.length - 1].Comments = current;
                        }
                    }
                    break;
                case 1:
                    // if(stuffs[stuffs.length - 1].Comments===undefined){
                    //     buffer.description = current
                    // }
                    // else{
                    //     buffer.description = current+" - "+stuffs[stuffs.length - 1].Comments;
                    // }
                    buffer.description = current;
                    next++;
                    break;
                case 2:
                    buffer.Qty = parseFloat(current);
                    next++;
                    break;
                case 3:
                    buffer.UM = current;
                    next++;
                    break;
                case 4:
                    buffer.PPU = parseFloat(current.substr(1).split(',').join(''));
                    next++;
                    break;
                case 5:
                    buffer.Cost = parseFloat(current.substr(1).split(',').join(''));
                    buffer.Amount = parseFloat(current.substr(1).split(',').join(''));
                    next++;
                    break;
                    
            }
        }
        return stuffs;
        // console.log(stuffs);
    }

    protected importHTML(selectorFiles: FileList) {
        let data;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            let $ = Cheerio.load(event.target.result);
            // console.log($('#box-table-b').find('.tahoma12-gray').length);
            let entireList = this.getInner($('#box-table-b').find('.tahoma12-gray'));
            let objList = $('.tahoma14-gold');
            let a = $('table').first();
            a = a.children().eq(0).children().eq(0).children().eq(1).children().eq(0).children().eq(0).children().eq(0).children().eq(0).children().eq(3).children().eq(1).children().eq(0);
            a = a.children(); // tobody outer with start perptory estimate
            a = a.eq(1).children().eq(0).children().eq(0).children().eq(0).children(); // in side list
            // a = a.eq(3); // first three tr are empty // NAMES
            // a = a.eq(4); // 4 = edit estimate button, 5 = first title, 6 = first content
            // 7 = second title, 8 = second content

            a = a.eq(3).children().eq(2).children().eq(0).children().eq(0).children(); // name/ address/ shits
            this.setState({ Address: a.eq(1).children().eq(1).text() });
            this.setState({ City: a.eq(2).children().eq(1).text() });
            this.setState({ Year: a.eq(3).children().eq(1).text() });
            this.setState({ Stories: a.eq(4).children().eq(1).text() });
            this.setState({ Area: a.eq(5).children().eq(1).text() });
            this.setState({ TotalCost: a.eq(6).children().eq(1).text() });
            if (entireList.length != 0) {
                let count = 0;
                entireList[0].Cate = objList.eq(0).text().trim();
                for (let i = 1; i < entireList.length; i++) {
                    if (entireList[i].Item == 1) {
                        count++;
                        entireList[i].Cate = objList.eq(count).text().trim();
                    }
                    else {
                        entireList[i].Cate = objList.eq(count).text().trim();
                    }
                }
            }

            this.setState({ Item: entireList });
            // console.log(entireList);            
            //console.log(a.eq(0).children().eq(1).text());
        }.bind(this);
        reader.readAsText(file);
    }


    protected remindLeave() {
        $(function () {

            $(window).unbind('beforeunload');

            window.onbeforeunload = null;

        })

    }

    protected addWHP() {
        let list = this.state.Item;
        let WHP = {
            After: [],
            Amount: 0,
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: 'WholeHousePhotos',
            Comments: '',
            Item: 1,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,

            Before: []
        }
        list.push(WHP);
        this.setState({ Item: list });
    }

    protected UserChange(value) {

    }

    protected showStage() {
        if (this.state.Stage === '0') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0" selected>Initial</option>
                    <option value="1">Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '1') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" selected>Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '2') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1">Bid</option>
                    <option value="2" selected>Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '3') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" >Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3" selected>Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '4') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" >Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4" selected>Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '5') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" >Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5" selected>Complete</option>
                    <option value="6">Archived</option>
                </select>
            )
        }
        else if (this.state.Stage === '6') {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" >Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6" selected>Archived</option>
                </select>
            )
        }
        else {
            return (
                <select id='setStage' onChange={e => this.changeWindow(e.target.value)}>
                    <option value="0">Initial</option>
                    <option value="1" >Bid</option>
                    <option value="2">Work Order</option>
                    <option value="3">Invoice</option>
                    <option value="4">Pending Accounting Review</option>
                    <option value="5">Complete</option>
                    <option value="6" >Archived</option>
                    <option value="7" selected>Terminate</option>
                </select>
            )
        }
    }

    protected mentionSave() {
        window.setInterval(function () {
            alert("save");

        }, 5000);
    }

    protected exportJson() {
        const uniqueIdSmall = () => {
            return '_' + Math.random().toString(36).substring(2, 9);
        };

        if (this.state.Stage === '1') {
            let json = {
                invoice: '0',
                billTo: this.state.Note,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.DueDate,
                item: [],
                tax: parseFloat(this.state.Tax),
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description+" - "+each.Comments,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address + "-bid.rpni");
            FileSaver.saveAs(file);
        }
        else if (this.state.Stage === '2') {
            let json = {
                invoice: this.state.LBNum,
                billTo: this.state.uploadLink,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.DueDate,
                item: [],
                tax: parseFloat(this.state.Tax),
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description+" - "+each.Comments,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address + "-workorder.rpni");
            FileSaver.saveAs(file);
        }
        else if (this.state.Stage === '3') {
            let json = {
                invoice: this.state.Invoice,
                billTo: this.state.BillTo,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.InvoiceDate,
                item: [],
                tax: parseFloat(this.state.Tax),
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description+" - "+each.Comments,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address + "-invoice.rpni");
            FileSaver.saveAs(file);
        }

        // for (let each of this.state.Item) {
        //     json.item.push({
        //         description: each.description,
        //         unique: uniqueIdSmall(),
        //         amount: each.Cost,
        //         taxable: each.Taxable,
        //         before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
        //         during: [...each.During ? each.During.map((picture) => picture.Src) : []],
        //         after: [...each.After ? each.After.map((picture) => picture.Src) : []]
        //     })
        // }
        // var file = new File([JSON.stringify(json)], "rpn.rpni");
        // FileSaver.saveAs(file);

    }

    protected initItem() {
        return {
            After: [],
            Amount: 0,
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: '',
            Comments: '',
            Item: 1,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,

            Before: []
        }
    }

    protected addaddItem() {
        let list = this.state.Item;
        list.push(this.initItem());
        this.setState({ Item: list });
    }

    protected mapItem(value, index) {
        const addBefore = () => {

        }
        return (
            <div key={index}>
                <div className="insert">
                    <button style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '430px',
                        height: '25px',
                        fontSize: '14px',
                    }}
                        onClick={() => {
                            let list = this.state.Item;
                            list.splice(index, 0, this.initItem());
                            this.setState({ Item: list });
                        }}>AddItem</button>
                </div>
                <React.Fragment>
                    <div className="itemTop">
                        <div className="right">
                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                width: '65px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                                className="bigger" onClick={() => {
                                    let list = this.state.Item;
                                    list.splice(index, 1);
                                    this.setState({ Item: list });
                                }} title="delete">Delete</button>
                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                fontSize: '14px',
                                width: '65px',
                                height: '25px',
                                backgroundColor: this.state.Item[index].Taxable == true ? 'blue' : 'red'
                            }}
                                className={value.taxable ? "check" : "uncheck"} onClick={() => {
                                    let list = this.state.Item;
                                    list[index].Taxable = !list[index].Taxable;
                                    if (list[index].Taxable === true) {
                                        list[index].Tax = parseFloat((list[index].Qty * list[index].PPU * (parseFloat(this.state.Tax) / 100)).toFixed(2));
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }
                                    else {
                                        list[index].Tax = 0;
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }

                                    // console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="tax">Tax</button>

                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                width: '65px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                                className="bigger" onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Process === '0') {
                                        list[index].Process = '1';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Process</button>
                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                width: '65px',
                                height: '25px',
                                fontSize: '14px',
                            }}
                                className="bigger" onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Status === '0') {
                                        list[index].Status = '1';
                                        this.setState({ Item: list });
                                    }
                                    else if (list[index].Status === '1') {
                                        list[index].Status = '-1';
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Status = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Status</button>
                        </div>
                        <div style={{
                            marginLeft: '10px'
                        }}
                            className="left"><h4>{this.state.Item[index].Cate} - {this.state.Item[index].Item}</h4></div>
                    </div>
                    <table>
                        <tr>Category <input className="text" id='cate' value={value.Cate}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Cate = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Item <input className="text" id='item' value={value.Item}
                            onChange={e => {
                                let list = this.state.Item;
                                //console.log(e.target.value);
                                list[index].Item = parseInt(e.target.value) || 0;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Description <div> <textarea id='description' value={value.description}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].description = e.target.value;
                                this.setState({ Item: list });
                            }}
                            style={{
                                width: "425px",
                                height: "100px",
                                resize: "none"
                            }}>
                        </textarea></div></tr>
                        <tr>Comments <div> <textarea id='comments' value={value.Comments}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Comments = e.target.value;
                                this.setState({ Item: list });
                            }}
                            style={{
                                width: "425px",
                                height: "65px",
                                resize: "none"
                            }}>
                        </textarea></div></tr>
                        <tr>QTY <input className="text" id='qty' value={value.Qty}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Qty = parseInt(e.target.value) || 0;
                                list[index].Cost = list[index].Qty * list[index].PPU;
                                list[index].Tax = parseFloat((list[index].Qty * list[index].PPU * (parseFloat(this.state.Tax) / 100)).toFixed(2));
                                list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>UM <input className="text" id='um' value={value.UM}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].UM = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>PPU <input type="number" id='ppu' value={value.PPU}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].PPU = parseFloat(e.target.value) || 0;
                                list[index].Cost = list[index].Qty * list[index].PPU;
                                list[index].Tax = parseFloat((list[index].Qty * list[index].PPU * (parseFloat(this.state.Tax) / 100)).toFixed(2));
                                list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Cost: {value.Cost}</tr>
                        <tr>Tax: {value.Tax}</tr>
                        <tr>Total: {value.Amount}</tr>
                        <tr>
                            Before:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',
                                    fontSize: '14px',
                                    marginBottom: '5px',

                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addBeforePicture(e.target.files, index, 0) }}
                            //onClick={e.target.value=null}
                            //type="file" multiple id="beforefileupload" onClick={}
                            />
                            {this.state.Item[index].Before.map(function (pic, key) {
                                return (
                                    <React.Fragment>
                                        <tr key={key}>
                                            <td>{key + 1}:<button style={{
                                                fontSize: '14px',
                                            }} onClick={() => {
                                                let list = this.state.Item;
                                                list[index].Before.splice(key, 1);
                                                this.setState({ Item: list });
                                            }}

                                            >Del</button></td>
                                            <td>{pic.Name}</td>
                                        </tr>
                                    </React.Fragment>
                                )
                            }.bind(this))}
                        </tr>
                        <tr>
                            During:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',
                                    fontSize: '14px',
                                    marginBottom: '5px',

                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addDuringPicture(e.target.files, index,0) }} />
                            {this.state.Item[index].During.map(function (pic, key) {
                                return (
                                    <tr key={key}>
                                        <td>{key + 1}:<button style={{
                                            //marginLeft: '10px',
                                        }} onClick={() => {
                                            let list = this.state.Item;
                                            list[index].During.splice(key, 1);
                                            this.setState({ Item: list });
                                        }}>Del</button></td>
                                        <td>{pic.Name}</td>

                                    </tr>
                                )
                            }.bind(this))}
                        </tr>
                        <tr>
                            After:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',
                                    fontSize: '14px',
                                    marginBottom: '5px',

                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addAfterPicture(e.target.files, index, 0) }} />
                            {this.state.Item[index].After.map(function (pic, key) {
                                return (
                                    <tr key={key}>
                                        <td>{key + 1}:<button style={{
                                            //marginLeft: '10px',
                                        }} onClick={() => {
                                            let list = this.state.Item;
                                            list[index].After.splice(key, 1);
                                            this.setState({ Item: list });
                                        }}>Del</button></td>
                                        <td>{pic.Name}</td>
                                    </tr>
                                )
                            }.bind(this))}
                        </tr>
                    </table>
                    <div className="picture">

                    </div>
                </React.Fragment>
            </div>
        )
    }
    protected addAfterPicture(Files: FileList, index: number, temp:number) {

        if(Files.length==(temp+1)){
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].After.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                    }.bind(this),
                });
        }
        else{
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].After.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                        this.addAfterPicture(Files,index,temp+1);
                    }.bind(this),
                });
        }

    }

    protected addDuringPicture(Files: FileList, index: number, temp:number) {
        // console.log(Files);
        if(Files.length==(temp+1)){
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].During.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                    }.bind(this),
                });
        }
        else{
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].During.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                        this.addDuringPicture(Files,index,temp+1);
                    }.bind(this),
                });
        }
            
                
        
    }

    protected addBeforePicture(Files: FileList, index: number, temp:number) {

        if(Files.length==(temp+1)){
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].Before.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                    }.bind(this),
                });
        }
        else{
            var formData = new FormData();
                formData.append('image', Files[temp]);
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/uploadImage',
                    method: 'POST',
                    enctype: 'multipart/form-data',
                    dataType: 'json',
                    fileElementId: 'file-input',
                    cache: false,
                    processData: false,
                    contentType: false,
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: formData,
                    success: function (result) {
                        // console.log(result);
                        let list = this.state.Item;
                        list[index].Before.push({
                            Name: Files[temp].name,
                            Format: '',
                            Cate: list[index].Cate,
                            itemId: list[index].Item,
                            Src: result
                        });
                        this.setState({ Item: list });
                        this.addBeforePicture(Files,index,temp+1);
                    }.bind(this),
                });
        }

    }

    protected confirmDel() {
        console.log($('#delcate').val());
        console.log($('#delitem').val());
        $.ajax({
            url: 'https://rpntechserver.appspot.com/deleteItem?task_id=' + localStorage.getItem("currTask") + "&cate=" + $('#delcate').val() + "&item=" + $('#delitem').val(),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            success: function (data) {
                console.log(data);
                location.reload();
            }.bind(this),
        });
    }

    protected deleteItem() {
        var modal = document.getElementById('myModal2');
        modal.style.display = "block";
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    }



    protected submitStage() {
        var fd = new FormData();
        var newname = this.findUserByName($('#setUser').val());
        if (this.state.Username[parseInt(this.state.Stage)] === undefined) {
            //console.log(this.state.Username[parseInt(this.state.Stage)]);
            fd.append('userToAdd', newname);
            fd.append('task_id', localStorage.getItem('currTask'));
            fd.append('stage', this.state.Stage);
        }
        else {
            fd.append('userToRemove', this.state.Username[parseInt(this.state.Stage)]);
            fd.append('userToAdd', newname);
            fd.append('task_id', localStorage.getItem('currTask'));
            fd.append('stage', this.state.Stage);
        }

        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.InvoiceDate,
                DueDate: this.state.DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: this.state.StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,
                Tax: this.state.Tax,
                Username: this.state.Username,
                TaskStatus: this.state.TaskStatus,
                Client: this.state.Client,
            }),
            success: function (data) {
                var fd = new FormData();
                var newname = this.findUserByName($('#setUser').val());
                if (this.state.Username[$('#setStage').val()] === undefined) {
                    console.log(this.state.Username[$('#setStage').val()]);
                    fd.append('userToAdd', newname);
                    fd.append('task_id', localStorage.getItem('currTask'));
                    fd.append('stage', $('#setStage').val());
                }
                else {
                    fd.append('userToRemove', this.state.Username[$('#setStage').val()]);
                    fd.append('userToAdd', newname);
                    fd.append('task_id', localStorage.getItem('currTask'));
                    fd.append('stage', $('#setStage').val());
                }

                $.ajax({
                    url: 'https://rpntechserver.appspot.com/addTaskToUser',
                    //url: 'http://192.168.0.66:8080/addTaskToUserII?userToRemove='+this.state.oldUser+'&userToAdd='+$('#setUser').val()+'&task_id='+localStorage.getItem('currTask'),
                    method: 'POST',
                    dataType: 'json',
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    cache: false,
                    processData: false,
                    contentType: false,
                    data: fd,
                    success: function (data) {
                        window.location.reload();
                    }.bind(this),
                });
            }.bind(this),
        });


    }

    protected addItem() {
        var modal = document.getElementById('myModal');

        // Get the button that opens the modal
        var btn = document.getElementById("myBtn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal 
        modal.style.display = "block";
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }


    }

    protected formatDate(date) {

    }

    protected showCurrStage() {
        //console.log(this.state.Stage);

        if (this.state.Stage === '0') {
            return (<div>Initial</div>);
        }
        else if (this.state.Stage === '1') {
            return (<div>Bid</div>);
        }
        else if (this.state.Stage === '2') {
            return (<div>Work Order</div>);
        }
        else if (this.state.Stage === '3') {
            return (<div>Invoice</div>);
        }
        else if (this.state.Stage === '4') {
            return (<div>Pending Accounting Review </div>)
        }
        else if (this.state.Stage === '5') {
            return (<div>Complete </div>)
        }
        else if (this.state.Stage === '6') {
            return (<div>Archived</div>)
        }
        else {
            return (<div>Error!</div>);
        }
    }
    protected findUserByName(name) {
        //console.log(this.state.newUser); tim001
        //console.log(name);
        for (let i = 0; i < this.state.alluser.length; i++) {
            if (this.state.alluser[i].Firstname === name) {
                return this.state.alluser[i].Username;
            }

        }

    }



    protected readJson(selectorFiles: FileList) {
        var json;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            var test = event.target.result;
            console.log(test);
            //json = JSON.parse(event.target.result);
            //console.log(json);
            //json = JSON.stringify(json);
            //console.log(json);
            console.log(localStorage.getItem('currTask'));
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/parseJson',
                url: 'https://rpntechserver.appspot.com/parseJson?task_id=' + localStorage.getItem('currTask'),
                method: 'POST',
                datatype: "json",
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: test,
                success: function (data) {
                    console.log(data);
                    //this.props.history.push('/main');
                }.bind(this),
            });
        }.bind(this);
        reader.readAsText(file);

    }

    protected convert360(pic){
        console.log(pic);
        var modal = document.getElementById('sphere');

        // Get the button that opens the modal
        

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("closep")[0];

        // When the user clicks the button, open the modal 
        modal.style.display = "block";

        let div = document.getElementById('spherepic');
        var PSV = new PhotoSphereViewer({
            panorama: pic,
            container: div,
            time_anim: 1000,
            navbar: true,
            navbar_style: {
                backgroundColor: "silver",
            }
        })
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == span) {
                modal.style.display = "none";
            }
        }
    }

    protected mapShowItem(value, index) {
        const mapShowPicture = (picture, pIndex) => {
            this.count = this.count + 1;
            return (
                <div key={pIndex} style={{
                    flex: 1,
                    position: 'relative',
                    // minWidth: '33%',
                    minWidth: '180px',
                    maxWidth: '180px',
                    padding: '2px',
                    //marginLeft:'20px',
                    //marginTop:'0px',
                }} >
                    <img
                        style={{
                            // position: 'static',
                            width: '35%',
                            height: 'auto',
                            marginLeft: '3px',
                            //marginTop:'0px',
                            border: '1px solid black',
                        }}
                        src={picture}
                        onClick={this.convert360.bind(this, picture)}
                    />
                    <div>{this.count}</div>
                    <div>{this.state.Item[index].description}</div>

                </div>
            );
        };

        const buildShowPicture = (pictureE: any[]) => {
            this.count = 0;
            const picture = [...pictureE];
            let pictureList: any[] = [];
            let tempList: string[] = [];
            let key: number = 0;
            while (picture.length > 0) {
                /**
                 * FOR MAINTAINER
                 * FOR KEY! this is a bad practice, due to key change, the entire component list may rendered again due to small change.
                 * TOFIXIT: use individual key value.
                 */
                if (tempList.length >= 3) {
                    pictureList.push(<tr key={key++}>
                        <td >
                            <div >
                                <div style={{
                                    display: 'flex',
                                    flexWrap: 'wrap',
                                    justifyContent: 'center',
                                }}>{tempList.map(mapShowPicture)}</div>
                            </div>
                        </td>
                    </tr>);
                    tempList = [];
                }
                tempList.push(picture.shift());
            }
            if (tempList.length > 0) {
                pictureList.push(<tr key={key}>
                    <td>
                        <div>
                            <div style={{
                                display: 'flex',
                                flexWrap: 'wrap',
                                justifyContent: 'center',
                            }}>{tempList.map(mapShowPicture)}</div>
                        </div>
                    </td>
                </tr>);
            }
            return pictureList;
        };

        return (<React.Fragment key={index}><tr>
            <td>
                <div style={{
                    padding: '3px',
                }}>{index + 1}.&nbsp;{value.description}</div>
            </td>
            <td style={{

                padding: '3px',
                fontWeight: 'bold',
            }}>
                <div style={{ display: 'flex' }}>
                    <div>$</div>
                    <div style={{ flex: 1, textAlign: 'right' }}>
                        {value.amount ? value.amount.toFixed(2) : 0}
                    </div>
                </div>
            </td>
        </tr>
            {value.before.length > 0 ?

                <React.Fragment>
                    <tr>
                        <td colSpan={2}>Before</td>
                    </tr>
                    {buildShowPicture(value.before)}

                </React.Fragment>
                : void 0}
            {value.during.length > 0 ?
                <React.Fragment>
                    <tr>
                        <td colSpan={2}>During</td>
                    </tr>
                    {buildShowPicture(value.during)}
                </React.Fragment>
                : void 0}

            {value.after.length > 0 ?
                <React.Fragment>
                    <tr>
                        <td colSpan={2}>After</td>
                    </tr>
                    {buildShowPicture(value.after)}
                </React.Fragment>
                : void 0}
        </React.Fragment>);


    }

    protected showTable(taxTotal, TotalAmount) {
        if(localStorage.getItem("Authority")==='3'){
            if (this.state.Stage === '0') {
                return <div className="page2"><table id="stage0">
                    <tr ><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>Asset Number</td> <td>{this.state.AssetNum}</td></tr>
                    <tr><td style={{ width: "25%" }}>Start Date</td><td>{this.state.StartDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                    <tr><td style={{ width: "25%" }}>Description </td><td>{this.state.Desc}</td></tr>
                    <tr><td style={{ width: "25%" }}>Lock Box Number</td> <td>{this.state.LBNum}</td></tr>
                </table>
                </div>
            }
            else if (this.state.Stage === '1') {
                return <div className="page2"><table id="stage1" style={{
                    tableLayout: "fixed",
                    wordWrap: "break-word"
                }}>
                    <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>Asset Number:</td> <td>{this.state.AssetNum}</td></tr>
                    <tr><td style={{ width: "25%" }}>Start Date:</td><td>{this.state.StartDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>Due Date:</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>City/State/Zip Code: </td><td>{this.state.City}</td></tr>
                    <tr><td style={{ width: "25%" }}> Description:</td><td>{this.state.Desc}</td></tr>
                    <tr><td style={{ width: "25%" }}>Lock Box Number:</td> <td>{this.state.LBNum}</td></tr>
                </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment key={key}>
                                    <tr>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    {/* <td
                                        style={{
                                            border: "none",
                                            borderCollapse: "collapse",
                                        }}
                                    ></td> */}
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
    
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount} </td></tr>
                        </tbody>
                        {/* <tbody>
                            {this.state.Item.map(this.mapShowItem)}
                        </tbody> */}
                    </table>
                </div>
            }
            else if (this.state.Stage === '2') {
                return <div className="page2" style={{
                }}>
                    <table id="stage2">
                        <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                        <tr><td style={{ width: "25%" }}>KeyCode/LockBoxNum</td><td>{this.state.LBNum}</td></tr>
                        <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                        <tr><td style={{ width: "25%" }}>UploadLink</td><td>{this.state.uploadLink}</td></tr>
                    </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment>
                                    <tr key={key}>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount} </td></tr>
                        </tbody>
                    </table>
                </div>
            }
            else if (this.state.Stage === '3') {
                return <div className="page2" style={{
                }}>
                    <table id="stage3">
                        <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                        <tr><td style={{ width: "25%" }}>Invoice Number</td> <td>{this.state.Invoice}</td></tr>
                        <tr><td style={{ width: "25%" }}>CompletionDate</td><td>{this.state.CompletionDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>Invoice Date</td><td>{this.state.InvoiceDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>BillTo </td><td>{this.state.BillTo}</td></tr>
                    </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment>
                                    <tr key={key}>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount} </td></tr>
                        </tbody>
                    </table>
                </div>
            }
            else if (this.state.Stage === '4') {
                return <div className="page2">Pending Accounting Review</div>
            }
            else if (this.state.Stage === '5') {
                return <div className="page2">Complete</div>
            }
            else if (this.state.Stage === '6') {
                return <div className="page2">Archived</div>
            }
            else {
                return <div className="page2"> Error! </div>
            }
        }
        else{
            if (this.state.Stage === '0') {
                return <div className="page"><table id="stage0">
                    <tr ><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>Asset Number</td> <td>{this.state.AssetNum}</td></tr>
                    <tr><td style={{ width: "25%" }}>Start Date</td><td>{this.state.StartDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                    <tr><td style={{ width: "25%" }}>Description </td><td>{this.state.Desc}</td></tr>
                    <tr><td style={{ width: "25%" }}>Lock Box Number</td> <td>{this.state.LBNum}</td></tr>
                </table>
                </div>
            }
            else if (this.state.Stage === '1') {
                return <div className="page"><table id="stage1" style={{
                    tableLayout: "fixed",
                    wordWrap: "break-word"
                }}>
                    <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>Asset Number:</td> <td>{this.state.AssetNum}</td></tr>
                    <tr><td style={{ width: "25%" }}>Start Date:</td><td>{this.state.StartDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>Due Date:</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>City/State/Zip Code: </td><td>{this.state.City}</td></tr>
                    <tr><td style={{ width: "25%" }}> Description:</td><td>{this.state.Desc}</td></tr>
                    <tr><td style={{ width: "25%" }}>Lock Box Number:</td> <td>{this.state.LBNum}</td></tr>
                </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment key={key}>
                                    <tr>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    {/* <td
                                        style={{
                                            border: "none",
                                            borderCollapse: "collapse",
                                        }}
                                    ></td> */}
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
    
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal.toFixed(2)}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount.toFixed(2)} </td></tr>
                        </tbody>
                        {/* <tbody>
                            {this.state.Item.map(this.mapShowItem)}
                        </tbody> */}
                    </table>
                </div>
            }
            else if (this.state.Stage === '2') {
                return <div className="page" style={{
                }}>
                    <table id="stage2">
                        <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                        <tr><td style={{ width: "25%" }}>KeyCode/LockBoxNum</td><td>{this.state.LBNum}</td></tr>
                        <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                        <tr><td style={{ width: "25%" }}>UploadLink</td><td>{this.state.uploadLink}</td></tr>
                    </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment>
                                    <tr key={key}>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount} </td></tr>
                        </tbody>
                    </table>
                </div>
            }
            else if (this.state.Stage === '3') {
                return <div className="page" style={{
                }}>
                    <table id="stage3">
                        <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                        <tr><td style={{ width: "25%" }}>Invoice Number</td> <td>{this.state.Invoice}</td></tr>
                        <tr><td style={{ width: "25%" }}>CompletionDate</td><td>{this.state.CompletionDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>Invoice Date</td><td>{this.state.InvoiceDate}</td></tr>
                        <tr><td style={{ width: "25%" }}>BillTo </td><td>{this.state.BillTo}</td></tr>
                    </table>
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Process</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>{this.state.Item.map(function (item, key) {
                            return (
                                <React.Fragment>
                                    <tr key={key}>
                                        <td>{item.Cate}</td>
                                        <td>{item.Item}</td>
                                        <td>{item.description}<div>{item.Comments}</div></td>
                                        <td>{item.Cost}</td>
                                        <td>{this.showProcess(item.Process)}</td>
                                        <td>{this.showStatus(item.Status)}</td>
                                    </tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.Before, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.During, item.description)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", borderBottomColor: "#DDDDDD" }}>&nbsp;</td><th colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#DDDDDD", }}>&nbsp;</td><td colSpan={6}>{this.mapPicture(item.After, item.description)}</td></tr>
                                </React.Fragment>
                            )
                        }.bind(this))}
                        <tr><td colSpan={2}>HOA: Sales tax {this.state.Tax} %</td><td colSpan={5}>TotalTax: ${taxTotal}</td></tr>
                        <tr><td colSpan={6}>Total Amount: ${TotalAmount} </td></tr>
                        </tbody>
                    </table>
                </div>
            }
            else if (this.state.Stage === '4') {
                return <div className="page">Pending Accounting Review</div>
            }
            else if (this.state.Stage === '5') {
                return <div className="page">Complete</div>
            }
            else if (this.state.Stage === '6') {
                return <div className="page">Archived</div>
            }
            else {
                return <div className="page"> Error! </div>
            }
        }
        
    }

    protected mapPicture(picture: any[], desc: string) {
        return (
            picture.map(function (item, key) {
                return (
                    <div>
                        <div>
                            <img style={{
                                width: '25%',
                                height: 'auto',

                                padding: '3px'
                            }}
                                src={item.Src} 
                                onClick={this.convert360.bind(this, item.Src)}
                                />
                        </div>
                        <div>
                            {key + 1}.{desc}
                        </div>

                    </div>




                )
            }.bind(this))
        )
    }

    protected printPDF() {
        var divToPrint = document.getElementById('show');
        var popupWin = window.open('', '_blank', 'width=300,height=300');
        popupWin.document.open();
        popupWin.document.write('<html><body onload="window.print()">' + divToPrint.innerHTML + '</html>');
        popupWin.document.close();
    }

    protected downloadBefore() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.Before;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });
        var add = this.state.Address
        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, add + "-Before.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;


    }
    protected test(url: string) {
        window.location.href = url;
    }

    protected downloadDuring() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.During;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });
        var add = this.state.Address;
        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, add + "-During.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;



    }

    protected downloadAfter() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.After;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });
        var add = this.state.Address
        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, add + "-After.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;

    }

    protected showProcess(value) {
        if (value === '0') {
            return (<div>Incomplete</div>);
        }
        else {
            return (<div>Complete</div>);
        }
    }

    protected showStatus(value) {
        if (value === '0') {
            return "Unknown";
        }
        else if (value === '1') {
            return 'Approved';
        }
        else {
            return "Pushback";
        }
    }

    protected uploadLinkChange(value) {
        this.setState({
            uploadLink: value
        })
    }

    protected NoteChange(value) {
        this.setState({
            Note: value
        });
    }

    protected DescChange(value) {
        this.setState({
            Desc: value
        })
    }

    protected LBNumChange(value) {
        this.setState({
            LBNum: value
        })
    }

    protected changeWindow(value) {
        var modal = document.getElementById('myModal');

        // Get the button that opens the modal
        var btn = document.getElementById("myBtn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal 
        modal.style.display = "block";
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal || event.target == span) {
                modal.style.display = "none";
            }
        }
        console.log(value);

        this.setState({
            Stage: value
        });
    }
    protected changeStage2() {

        let temp = parseInt(this.state.Stage, 10);
        let result = temp + 1;

        console.log(temp);
        this.setState({
            Stage: result.toString()
        });
    }
    protected IDateChange(value) {
        this.setState({
            DueDate: value
        });
    }
    protected CDateChange(value) {
        this.setState({
            CompletionDate: value
        });
    }
    protected BillToChange(value) {
        this.setState({
            BillTo: value
        });
    }
    protected InvoiceChange(value) {
        this.setState({
            Invoice: value
        });
    }
    protected handleChange(selectorFiles: FileList) {
        var data;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            data = JSON.parse(event.target.result);
            //let test = data;
            //console.log(data);
            let allitem = [];
            let count = 0;
            if (data.invoice === undefined) {
                for (let i = 0; i < Object.keys(data.list).length; i++) {
                    //console.log(data.list[i]);
                    let cate = data.list[i].cate;
                    //console.log(cate);
                    for (let j = 0; j < Object.keys(data.list[i].each).length; j++) {
                        //console.log(data.list[i].each[j])
                        let eachitem = {
                            After: [],
                            Amount: 0,
                            During: [],
                            Process: '0',
                            Status: '0',
                            Tax: 0,
                            Taxable: true,
                            description: '',
                            Cate: '',
                            Comments: '',
                            Item: 0,
                            Qty: 0,
                            UM: '',
                            PPU: 0,
                            Cost: 0,

                            Before: []
                        }
                        eachitem.Item = j + 1;
                        eachitem.description = data.list[i].each[j].description;
                        eachitem.Cate = cate;
                        eachitem.Comments = data.list[i].each[j].comments;
                        eachitem.Qty = data.list[i].each[j].qty;
                        eachitem.UM = data.list[i].each[j].UM;
                        eachitem.PPU = data.list[i].each[j].PPU;
                        eachitem.Cost = data.list[i].each[j].cost;
                        eachitem.Amount = data.list[i].each[j].cost;

                        //console.log(data.list[i].each[j].image);
                        if (data.list[i].each[j].image !== undefined) {
                            for (let k = 0; k < Object.keys(data.list[i].each[j].image).length; k++) {
                                let pic = {
                                    Cate: '',
                                    Name: '',
                                    Src: '',
                                    itemID: 0,
                                    Format: ''
                                }
                                pic.Cate = cate;
                                pic.Name = data.list[i].each[j].image[k].name;
                                pic.Src = data.list[i].each[j].image[k].src;
                                pic.itemID = j + 1;
                                eachitem.Before.push(pic);
                            }
                        }
                        allitem.push(eachitem);

                    }
                }
                //console.log(allitem);
                this.setState({ Address: data.address });
                this.setState({ City: data.city });
                this.setState({ Year: data.year });
                this.setState({ Area: data.area });
                this.setState({ TotalCost: data.totalCost });
                this.setState({ Tax: '0' });
                this.setState({ Item: allitem });
            }
            // else if(data.TaskStatus!=undefined){

            // }
            else {
                let temptax = data.tax;
                for (let i = 0; i < data.item.length; i++) {
                    let eachitem = {
                        After: [],
                        Amount: 0,
                        During: [],
                        Process: '0',
                        Status: '0',
                        Tax: 0,
                        Taxable: true,
                        description: '',
                        Cate: 'Unknown',
                        Comments: '',
                        Item: 0,
                        Qty: 0,
                        UM: '',
                        PPU: 0,
                        Cost: 0,
                        Before: []
                    }
                    eachitem.Item = i + 1;
                    eachitem.description = data.item[i].description;
                    eachitem.Amount = data.item[i].amount;
                    eachitem.Cost = data.item[i].amount;
                    eachitem.Taxable = data.item[i].taxable;
                    if (data.item[i].before !== undefined) {
                        for (let k = 0; k < Object.keys(data.item[i].before).length; k++) {
                            let pic = {
                                Cate: '',
                                Name: '',
                                Src: '',
                                itemID: 0,
                                Format: ''
                            }
                            pic.Cate = "Unknown";
                            pic.Name = "Unknown";
                            pic.Src = data.item[i].before[k];
                            pic.itemID = i + 1;
                            eachitem.Before.push(pic);
                        }
                    }
                    if (data.item[i].during !== undefined) {
                        for (let k = 0; k < Object.keys(data.item[i].during).length; k++) {
                            let pic = {
                                Cate: '',
                                Name: '',
                                Src: '',
                                itemID: 0,
                                Format: ''
                            }
                            pic.Cate = "Unknown";
                            pic.Name = "Unknown";
                            pic.Src = data.item[i].during[k];
                            pic.itemID = i + 1;
                            eachitem.During.push(pic);
                        }
                    }
                    if (data.item[i].after !== undefined) {
                        for (let k = 0; k < Object.keys(data.item[i].after).length; k++) {
                            let pic = {
                                Cate: '',
                                Name: '',
                                Src: '',
                                itemID: 0,
                                Format: ''
                            }
                            pic.Cate = "Unknown";
                            pic.Name = "Unknown";
                            pic.Src = data.item[i].after[k];
                            pic.itemID = i + 1;
                            eachitem.After.push(pic);
                        }
                    }
                    allitem.push(eachitem);
                }
                this.setState({ Address: data.address ? data.address : "" });
                this.setState({ billTo: data.billTo ? data.billTo : "" });
                this.setState({ CompletionDate: data.completionDate ? data.completionDate : "" });
                this.setState({ InvoiceDate: data.invoiceDate ? data.invoiceDate : "" });
                this.setState({ Tax: data.tax + "" });
                this.setState({ Item: allitem });
            }

            //console.log(this.state);
            let aata = JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: this.state.StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,


            })
            //console.log(JSON.parse(aata));


        }.bind(this);
        reader.readAsText(file);
        //console.log(data);
    }
    protected AddrChange(value) {
        this.setState({
            Address: value
        });
    }
    protected AssetChange(value) {
        this.setState({
            AssetNum: value
        });
    }
    protected StartDChange(value) {
        this.setState({
            StartDate: value
        });
    }
    protected StageChange(value) {
        console.log(value);
        this.setState({
            Stage: value
        });
    }
    protected CityChange(value) {
        this.setState({
            City: value
        });
    }
    protected logout() {

    }
    protected changeStatus() {
        this.props.history.push("/main");
    }
    protected addTask() {

    }


    protected submitTask() {
        console.log(this.state);
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.InvoiceDate,
                DueDate: this.state.DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: this.state.StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,
                Tax: this.state.Tax,
                Username: this.state.Username,
                TaskStatus: this.state.TaskStatus,
                Client: this.state.Client,
            }),
            success: function (data) {
                console.log(JSON.parse(data));
                this.props.history.push('/main');
            }.bind(this),
        });
    }
}

export default PageGhotiEdittask;
