/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiEdittask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from './logo';
import { ITask, IPage } from './interface';
import * as $ from "jquery";
import * as fs from 'fs';
// import * as JSZip from 'jszip';
// import * as JSZipUtils from 'jszip-utils';
import * as FileSaver from 'file-saver';
// import * as downloadi from "images-downloader";
// import * as request from 'request';
import * as JSZipUtils from "./jszip-utils.js";
import * as JSZipUtilsMin from "./jszip-utils.min.js";
//import * as saveas from "./FileSaver.js";
import * as JSZip from "./jszip.js";
import * as helper from "./helpers.js";

import Config from '../config/config';

export interface IProps {
    page: IPage;
    updatePage: (page: IPage, next?: () => void) => void;
}

export interface IState {

}

class PageGhotiEdittask extends React.Component<IProps, IState> {

    state = {
        Address: '',
        AssetNum: '',
        StartDate: '',
        City: '',
        Stage: '',
        Invoice: '',
        DueDate: '',
        CompletionDate: '',
        BillTo: '',
        LBNum: '',
        Desc: '',
        uploadLink: '',
        Note: '',
        Process: '',
        Status: '',
        Item: [],
        Before:[],
        During:[],
        After:[],
        data: [],
    };
    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTaskById?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                console.log(result);
                this.setState({ Address: result.Address });
                this.setState({ AssetNum: result.asset_num });
                this.setState({ StartDate: result.StartDate });
                this.setState({ City: result.City });
                this.setState({ Stage: result.Stage });
                this.setState({ Invoice: result.Invoice });
                this.setState({ BillTo: result.BillTo });
                this.setState({ CompletionDate: result.CompletionDate });
                this.setState({ DueDate: result.InvoiceDate });
                this.setState({ LBNum: result.KeyCode });
                this.setState({ Desc: result.Desc });
                this.setState({ uploadLink: result.upload_link });
                this.setState({ Item: result.ItemList });
                this.setState({ Note: result.Note });
                this.setState({ Process: result.Process });
                this.setState({ Status: result.Status });
            }).bind(this),
        });
        $.ajax({
            url:'https://rpntechserver.appspot.com/findAllImg?task_id='+ localStorage.getItem("currTask")+'&status=before',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success:(function(result){
                //console.log(result);
                this.setState({Before:result});
            }).bind(this),
        })
    }

    public constructor(props) {
        super(props);
        this.submitTask = this.submitTask.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.showTable = this.showTable.bind(this);
        this.readJson = this.readJson.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.changeStage2 = this.changeStage2.bind(this);
        this.showCurrStage = this.showCurrStage.bind(this);
        this.showProcess = this.showProcess.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.downloadBefore = this.downloadBefore.bind(this);


    }

    public render() {
        return (
            <div className="main">
                <div className="title">
                    <div style={{
                        display: 'flex',
                        height: '100px',
                        alignItems: 'center',
                        width: '100%'
                    }}>
                        <img src={logo} alt="logo" style={{
                            width: '70px',
                            height: '50px',
                        }} />
                        <div style={{
                            flex: 1,
                            paddingLeft: '10px',
                            paddingTop: '20px',
                            display: 'inline',
                            fontSize: '20px',
                            color: 'darkblue',
                            fontWeight: 'bold',
                        }}>
                            Repair and Preservation Network, LLC
            </div>
                        <div style={{
                            marginTop: '20px',
                            marginRight: '20px',
                            textAlign: 'center',
                            width: '30%'

                        }}>
                            <input type="text" id="myInput" placeholder="Search for Addr.." title="Search Task" />
                        </div>
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '10px',
                            textAlign: 'right',
                        }}>
                            <button className='link' title='Log out' onClick={this.logout}><ins>Log Out</ins></button>
                        </div> */}
                    </div>
                </div>
                <div className="space">
                    <div style={{
                        alignItems: 'center',
                        textAlign: 'center',
                        marginTop: '10px',
                        width: '100%',
                    }}>
                        Welcome to Repair and Preservation Network Company!
            </div>
                </div>
                <div className="menu">
                    <div style={{
                        margin: '15px',
                    }}>
                        <button className="link" title="View Task" onClick={this.changeStatus}><ins>View Task</ins></button>
                    </div>
                    <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Add Task" onClick={this.addTask}><ins>Add Task</ins></button>
                    </div></div>
                <div style={{
                    marginLeft: '10px',
                    marginTop: '10px',
                }}>
                    <select id='setStage' onChange={e => this.changeStage(e.target.value)}>
                        <option value="0">Initial</option>
                        <option value="1">Bid</option>
                        <option value="2">Work Order</option>
                        <option value="3">Invoice</option>
                    </select></div>
                <div>
                    <button style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '35px',
                    }}
                        title="Submit Task" onClick={this.changeStage2}><ins>Next Stage</ins>
                    </button>
                    <div style={{
                        marginLeft: '10px'
                    }}>Current Stage is : {this.state.Stage}</div>
                </div>
                {this.showTable()}

                <button
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    title="Submit Task" onClick={this.submitTask}><ins>Submit</ins></button>
                <input
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    type="file" id="readJson" name="json" onChange={(e) => { this.readJson(e.target.files) }} />
                <input
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    type="file" id="fileUpload" onChange={(e) => { this.handleChange(e.target.files) }} />
                <button
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    title="download before" onClick={this.downloadBefore}><ins>Before</ins></button>
                <button
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    title="download during" onClick={this.downloadDuring}><ins>During</ins></button>
                <button
                    style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '25px',
                    }}
                    title="download after" onClick={this.downloadAfter}><ins>After</ins></button>
            </div>);
    }

    protected showCurrStage() {

        // if (this.state.Stage === '0') {
        //     return <div>Initial</div>;
        // }
        // else if (this.state.Stage === '1') {
        //     return <div>Bid</div>;
        // }
        // else if (this.state.Stage === '2') {
        //     return <div>Work Order</div>;
        // }
        // else if (this.state.Stage === '3') {
        //     return <div>Invoice</div>;
        // }
        // else {
        //     return <div>Done</div>;
        // }
    }


    protected readJson(selectorFiles: FileList) {
        var json;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            var test = event.target.result;
            console.log(test);
            //json = JSON.parse(event.target.result);
            //console.log(json);
            //json = JSON.stringify(json);
            //console.log(json);
            console.log(localStorage.getItem('currTask'));
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/parseJson',
                url: 'https://rpntechserver.appspot.com/parseJson?task_id=' + localStorage.getItem('currTask'),
                method: 'POST',
                datatype: "json",
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: test,
                success: function (data) {
                    console.log(data);
                    //this.props.history.push('/main');
                }.bind(this),
            });
        }.bind(this);
        reader.readAsText(file);

    }

    protected showTable() {
        if (this.state.Stage === '0') {
            return <div><table>
                <tr>Property Address <input className="text" id='propaddr' value={this.state.Address}
                    onChange={e => this.AddrChange(e.target.value)} /></tr>
                <tr>Asset Number <input className="text" id='assetnum' value={this.state.AssetNum}
                    onChange={e => this.AssetChange(e.target.value)} /></tr>
                <tr>Start Date      <input className="text" id='startdate' value={this.state.StartDate}
                    onChange={e => this.StartDChange(e.target.value)} /></tr>
                <tr>City      <input className="text" id='city' value={this.state.City}
                    onChange={e => this.CityChange(e.target.value)} /></tr>
                <tr>Description      <input className="text" id='description' value={this.state.Desc}
                    onChange={e => this.DescChange(e.target.value)} /></tr>
                <tr>Lock Box Number     <input className="text" id='lockboxnumber' value={this.state.LBNum}
                    onChange={e => this.LBNumChange(e.target.value)} /></tr>
            </table>
            </div>
        }
        else if (this.state.Stage === '1') {
            return <div><table>
                <tr>Property Address <input className="text" id='propaddr' value={this.state.Address}
                    onChange={e => this.AddrChange(e.target.value)} /></tr>
                <tr>Asset Number <input className="text" id='assetnum' value={this.state.AssetNum}
                    onChange={e => this.AssetChange(e.target.value)} /></tr>
                <tr>Start Date      <input className="text" id='startdate' value={this.state.StartDate}
                    onChange={e => this.StartDChange(e.target.value)} /></tr>
                <tr>Due Date      <input className="text" id='duedate' value={this.state.DueDate}
                    onChange={e => this.IDateChange(e.target.value)} /></tr>
                <tr>City/State/Zip Code      <input className="text" id='city' value={this.state.City}
                    onChange={e => this.CityChange(e.target.value)} /></tr>
                <tr>Description      <input className="text" id='description' value={this.state.Desc}
                    onChange={e => this.DescChange(e.target.value)} /></tr>
                <tr>Lock Box Number     <input className="text" id='lockboxnumber' value={this.state.LBNum}
                    onChange={e => this.LBNumChange(e.target.value)} /></tr>
            </table>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Process</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {
                        return (
                            <React.Fragment>
                                <tr key={key}>
                                    <td>{item.Cate}</td>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                    <td>{this.showProcess}</td>
                                    <td>{this.showStatus}</td>
                                </tr>
                                <th> Before </th>
                                <tr>{this.mapPicture(item.Before)}</tr>
                                <th> During </th>
                                <tr>{this.mapPicture(item.During)}</tr>
                                <th> After </th>
                                <tr>{this.mapPicture(item.After)}</tr>
                            </React.Fragment>
                        )
                    }.bind(this))}
                    </tbody>
                </table>
            </div>
        }
        else if (this.state.Stage === '2') {
            return <div style={{
            }}>
                <table>
                    <tr>Property Address <input className="text" id='propaddr' value={this.state.Address}
                        onChange={e => this.AddrChange(e.target.value)} /></tr>
                    <tr>Asset Number <input className="text" id='assetnum' value={this.state.AssetNum}
                        onChange={e => this.AssetChange(e.target.value)} /></tr>
                    <tr>Start Date      <input className="text" id='startdate' value={this.state.StartDate}
                        onChange={e => this.StartDChange(e.target.value)} /></tr>
                    <tr>City      <input className="text" id='city' value={this.state.City}
                        onChange={e => this.CityChange(e.target.value)} /></tr>
                    <tr>DueDate <input className="text" id='idate' value={this.state.DueDate}
                        onChange={e => this.IDateChange(e.target.value)} /></tr>
                    <tr>Note <input className="text" id='note' value={this.state.Note}
                        onChange={e => this.NoteChange(e.target.value)} /></tr>
                </table>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {
                        return (
                            <React.Fragment>
                                <tr key={key}>
                                    <td>{item.Cate}</td>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                </tr>
                                <th> Before </th>
                                <tr>{this.mapPicture(item.Before)}</tr>
                                <th> During </th>
                                <tr>{this.mapPicture(item.During)}</tr>
                                <th> After </th>
                                <tr>{this.mapPicture(item.After)}</tr>
                            </React.Fragment>
                        )
                    }.bind(this))}
                    </tbody>
                </table>
            </div>
        }
        else if (this.state.Stage === '3') {
            return <div style={{
            }}>
                <table>
                    <tr>Property Address <input className="text" id='propaddr' value={this.state.Address}
                        onChange={e => this.AddrChange(e.target.value)} /></tr>
                    <tr>Asset Number <input className="text" id='assetnum' value={this.state.AssetNum}
                        onChange={e => this.AssetChange(e.target.value)} /></tr>
                    <tr>Lock Box Number <input className="text" id='lockboxnumber' value={this.state.LBNum}
                        onChange={e => this.LBNumChange(e.target.value)} /></tr>
                    <tr>City      <input className="text" id='city' value={this.state.City}
                        onChange={e => this.CityChange(e.target.value)} /></tr>
                    <tr>DueDate <input className="text" id='idate' value={this.state.DueDate}
                        onChange={e => this.IDateChange(e.target.value)} /></tr>
                    <tr>Note <input className="text" id='note' value={this.state.Note}
                        onChange={e => this.NoteChange(e.target.value)} /></tr>
                    <tr>Upload Link <input className="text" id='uploadlink' value={this.state.uploadLink}
                        onChange={e => this.uploadLinkChange(e.target.value)} /></tr>
                </table>
                <table>
                    <thead>
                        <tr><th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {

                        return (
                            <React.Fragment>
                                <tr key={key}>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                </tr>
                                <tr> Before </tr>
                                <tr>{this.mapPicture(item.Before)}</tr>


                            </React.Fragment>


                        )
                    }.bind(this))
                    }
                    </tbody>
                </table>
            </div>
        }
        else if (this.state.Stage === '4') {

        }
        else {
            return <div> done </div>
        }
    }

    protected mapPicture(picture: any[]) {
        return (
            picture.map(function (item, key) {
                return (
                    <img style={{
                        width: '20%',
                        height: 'auto',
                        padding: '3px'
                    }}
                        src={item.Src} />
                )
            }.bind(this))
        )
    }

    protected downloadBefore() {
        // var Promise = window.Promise;
        // if (!Promise) {
        //     Promise = JSZip.external.Promise;
        // }
        /**
 * Reset the message.
 */
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.Before;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });

        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, "example.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;


    }
    protected test(url: string) {
        window.location.href = url;
    }

    protected downloadDuring() {
        var urls = [
            'https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d07%22)?generation=1533743628002482&alt=media',
            "https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d08%22)?generation=1533743628113813&alt=media",
            "https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d09%22)?generation=1533743628191702&alt=media"
        ];
        var url = 'https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d07%22)?generation=1533743628002482&alt=media';



    }

    protected downloadAfter() {
        var urls = [
            'https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d07%22)?generation=1533743628002482&alt=media',
            "https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d08%22)?generation=1533743628113813&alt=media",
            "https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/ObjectIdHex(%225b6b120b65689c0001317d09%22)?generation=1533743628191702&alt=media"
        ];


    }

    protected showProcess(value) {
        if (value === '0') {
            return (<div>Imcomplete</div>);
        }
        else {
            return (<div>Done</div>);
        }
    }

    protected showStatus(value) {
        if (value === '0') {
            return "Incomplete"
        }
        else {
            return "Done"
        }
    }

    protected uploadLinkChange(value) {
        this.setState({
            uploadLink: value
        })
    }

    protected NoteChange(value) {
        this.setState({
            Note: value
        });
    }

    protected DescChange(value) {
        this.setState({
            Desc: value
        })
    }

    protected LBNumChange(value) {
        this.setState({
            LBNum: value
        })
    }

    protected changeStage(value) {
        console.log(value);
        this.setState({
            Stage: value
        });
    }
    protected changeStage2() {

        let temp = parseInt(this.state.Stage, 10);
        let result = temp + 1;

        console.log(temp);
        this.setState({
            Stage: result.toString()
        });
    }
    protected IDateChange(value) {
        this.setState({
            DueDate: value
        });
    }
    protected CDateChange(value) {
        this.setState({
            CompletionDate: value
        });
    }
    protected BillToChange(value) {
        this.setState({
            BillTo: value
        });
    }
    protected InvoiceChange(value) {
        this.setState({
            Invoice: value
        });
    }
    protected handleChange(selectorFiles: FileList) {
        var data;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            data = JSON.parse(event.target.result);
            console.log(data.completionDate);
            this.setState({ Address: data.address });
            this.setState({ DueDate: data.invoiceDate });
            this.setState({ CompletionDate: data.completionDate });
            this.setState({ Invoice: data.invoice });
            this.setState({ BillTo: data.billTo });
            //this.setState({})
            //console.log(this.state.Address);
        }.bind(this);
        reader.readAsText(file);
        //console.log(data);
    }
    protected AddrChange(value) {
        this.setState({
            Address: value
        });
    }
    protected AssetChange(value) {
        this.setState({
            AssetNum: value
        });
    }
    protected StartDChange(value) {
        this.setState({
            StartDate: value
        });
    }
    protected StageChange(value) {
        this.setState({
            Stage: value
        });
    }
    protected CityChange(value) {
        this.setState({
            City: value
        });
    }
    protected logout() {

    }
    protected changeStatus() {

    }
    protected addTask() {

    }


    protected submitTask() {
        var temp;
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                asset_num: this.state.AssetNum,
                startDate: this.state.StartDate,
                city: this.state.City,
                address: this.state.Address,
                stage: this.state.Stage,
                Invoice: this.state.Invoice,
                CompletionDate: this.state.CompletionDate,
                InvoiceDate: this.state.DueDate,
                billTo: this.state.BillTo,
                KeyCode: this.state.LBNum,
                upload_link: this.state.uploadLink,
                ItemList: this.state.Item,
                Note: this.state.Note,
                Desc: this.state.Desc

            }),
            success: function (data) {
                console.log(data);
                this.props.history.push('/main');
            }.bind(this),
        });
    }
}

export default PageGhotiEdittask;
