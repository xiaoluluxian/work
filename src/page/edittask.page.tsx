/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiEdittask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from './logo';
import { IItem, IPage } from './interface';
import * as $ from "jquery";
import * as fs from 'fs';
// import * as JSZip from 'jszip';
// import * as JSZipUtils from 'jszip-utils';
import * as FileSaver from 'file-saver';
// import * as downloadi from "images-downloader";
// import * as request from 'request';
import * as JSZipUtils from "./jszip-utils.js";
import * as JSZipUtilsMin from "./jszip-utils.min.js";
//import * as saveas from "./FileSaver.js";
import * as JSZip from "./jszip.js";
import * as jsPDF from "jspdf";
import * as helper from "./helpers.js";
import * as ReactToPrint from "react-to-print"
import 'bootstrap';
import Config from '../config/config';

export interface IProps {
    page: IPage;
    updatePage: (page: IPage, next?: () => void) => void;
    history:any;
}

export interface IState {

}

class PageGhotiEdittask extends React.Component<IProps, IState> {
    count = 0;
    state = {
        //page:null,
        Address: '',
        Area: '',
        BillTo: '',
        City: '',
        CompletionDate: '',
        Desc: '',
        Invoice: '',
        DueDate: '',
        Item: [],
        LBNum: '',
        Note: '',
        Stage: '',
        StartDate: '',
        Stories: '',
        TotalCost: '',
        TotalImage: 0,
        Year: '',
        AssetNum: '',
        uploadLink: '',
        Tax:0,
        Before: [],
        During: [],
        After: [],
        //data: [],
    };
    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTaskById?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //let test: IPage=JSON.parse(result.toString);
                //console.log(test);
                console.log(result);
                this.setState({ Address: result.Address });
                this.setState({ Area: result.Area });
                this.setState({ BillTo: result.BillTo });
                this.setState({ City: result.City });
                this.setState({ CompletionDate: result.CompletionDate });
                this.setState({ Desc: result.Desc });
                this.setState({ Invoice: result.Invoice });
                this.setState({ DueDate: result.InvoiceDate });
                this.setState({ Item: result.ItemList });
                this.setState({ LBNum: result.KeyCode });
                this.setState({ Note: result.Note });
                this.setState({ Stage: result.Stage });
                this.setState({ StartDate: result.StartDate });
                this.setState({ Stories: result.Stories });
                this.setState({ TotalCost: result.TotalCost });
                this.setState({ TotalImage: result.TotalImage });
                this.setState({ Year: result.Year });
                this.setState({ AssetNum: result.asset_num });
                this.setState({ uploadLink: result.upload_link });
                console.log(result.ItemList);
                //this.setState({ })                


            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=before',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                this.setState({ Before: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=during',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                this.setState({ During: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=after',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                this.setState({ After: result });
            }).bind(this),
        });
        //this.mentionSave();
        
    }

    public componentWillUnmount(){
        //clearInterval();
    }

    public constructor(props) {
        super(props);
        this.submitTask = this.submitTask.bind(this);
        this.changeStatus = this.changeStatus.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.showTable = this.showTable.bind(this);
        this.readJson = this.readJson.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.changeStage2 = this.changeStage2.bind(this);
        this.showCurrStage = this.showCurrStage.bind(this);
        this.showProcess = this.showProcess.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.downloadBefore = this.downloadBefore.bind(this);
        this.downloadAfter = this.downloadAfter.bind(this);
        this.downloadDuring = this.downloadDuring.bind(this);
        this.addItem = this.addItem.bind(this);
        this.submitItem = this.submitItem.bind(this);
        this.deleteItem = this.deleteItem.bind(this);
        this.confirmDel = this.confirmDel.bind(this);
        this.printPDF = this.printPDF.bind(this);
        this.initItem = this.initItem.bind(this);
        this.addaddItem = this.addaddItem.bind(this);
        this.mapItem = this.mapItem.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.exportJson = this.exportJson.bind(this);
        this.addBeforePicture = this.addBeforePicture.bind(this);
        this.addDuringPicture = this.addDuringPicture.bind(this);
        this.addAfterPicture = this.addAfterPicture.bind(this);



    }
    

    public render() {
        let tax: number = 0;
        let taxTotal: number = 0;
        let total: number = 0;
        for (let i of this.state.Item) {
            total += (i.Amount ? i.Amount : 0);
            if (i.taxable) {
                taxTotal += (i.Amount ? i.Amount : 0);
            }
        }
        tax = taxTotal * (this.state.Tax ? this.state.Tax : 0) * 0.01;
        total += tax;
        return (
            <div className="main">
                <div className="title">
                    <div style={{
                        display: 'flex',
                        height: '100px',
                        alignItems: 'center',
                        width: '100%'
                    }}>
                        <img src={logo} alt="logo" style={{
                            width: '70px',
                            height: '50px',
                        }} />
                        <div style={{
                            flex: 1,
                            paddingLeft: '10px',
                            paddingTop: '20px',
                            display: 'inline',
                            fontSize: '20px',
                            color: 'darkblue',
                            fontWeight: 'bold',
                        }}>
                            Repair and Preservation Network, LLC
            </div>
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '20px',
                            textAlign: 'center',
                            width: '30%'

                        }}>
                            <input type="text" id="myInput" placeholder="Search for Addr.." title="Search Task" />
                        </div> */}
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '10px',
                            textAlign: 'right',
                        }}>
                            <button className='link' title='Log out' onClick={this.logout}><ins>Log Out</ins></button>
                        </div> */}
                    </div>
                </div>
                <div className="space">
                    <div style={{
                        alignItems: 'center',
                        textAlign: 'center',
                        marginTop: '10px',
                        width: '100%',
                    }}>
                        Welcome to Repair and Preservation Network Company!
            </div>
                </div>
                <div className="menu">
                    <div style={{
                        margin: '15px',
                    }}>
                        <button className="link" title="View Task" onClick={this.changeStatus}><ins>View Task</ins></button>
                    </div>
                    {/* <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Add Task" onClick={this.addTask}><ins>Add Task</ins></button>
                    </div> */}
                    </div>
                <div style={{
                    marginLeft: '10px',
                    marginTop: '10px',
                }}>
                    <select id='setStage' onChange={e => this.changeStage(e.target.value)}>
                        <option value="0">Initial</option>
                        <option value="1">Bid</option>
                        <option value="2">Work Order</option>
                        <option value="3">Invoice</option>
                    </select></div>
                <div>
                    <button style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '60px',
                        height: '35px',
                    }}
                        title="Submit Task" onClick={this.changeStage2}><ins>Next Stage</ins>
                    </button>
                    <div style={{
                        marginLeft: '10px'
                    }}>{this.showCurrStage}</div>
                </div>
                <div className='edit'>
                    <button
                        style={{
                            // paddingTop: '20px',
                            // marginTop: '10px',
                            marginLeft: '10px',
                            width: '60px',
                            height: '25px',

                        }}
                        title="Submit Task" onClick={this.submitTask}><ins>Submit</ins></button>
                    {/* <input
                        style={{

                            marginTop: '10px',
                            marginLeft: '10px',
                            marginRight: '10px',

                        }}
                        type="file" id="readJson" name="json" onChange={(e) => { this.readJson(e.target.files) }} /> */}
                    <input
                        style={{
                            marginTop: '10px',
                            marginLeft: '30px',


                        }}
                        type="file" id="fileUpload" onChange={(e) => { this.handleChange(e.target.files) }} />
                    <button
                        style={{
                            // paddingTop: '20px',
                            // marginTop: '10px',

                            width: '60px',
                            height: '25px',
                        }}
                        title="download before" onClick={this.downloadBefore}>Before</button>
                    <button
                        style={{
                            // paddingTop: '20px',
                            // marginTop: '10px',
                            marginLeft: '10px',
                            width: '60px',
                            height: '25px',
                        }}
                        title="download during" onClick={this.downloadDuring}>During</button>
                    <button
                        style={{
                            // paddingTop: '20px',
                            // marginTop: '10px',
                            marginLeft: '10px',
                            width: '60px',
                            height: '25px',
                        }}
                        title="download after" onClick={this.downloadAfter}>After</button>
                    {/* <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                        }}
                        title="additem" onClick={this.addItem}>AddItem</button>
                    <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                        }}
                        title="delitem" onClick={this.deleteItem}>DelItem</button> */}
                    <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '65px',
                            height: '25px',
                        }}
                        title="delitem" onClick={this.printPDF}>PrintPDF</button>
                    <button
                        style={{
                            // paddingTop: '20px',
                            marginTop: '10px',
                            marginLeft: '10px',
                            width: '85px',
                            height: '25px',
                        }}
                        title="delitem" onClick={this.exportJson}>ExportJson</button>

                    <table>
                        <tr>Property Address <input className="text" id='propaddr' value={this.state.Address}
                            onChange={e => this.AddrChange(e.target.value)} /></tr>
                        <tr>Asset Number <input className="text" id='assetnum' value={this.state.AssetNum}
                            onChange={e => this.AssetChange(e.target.value)} /></tr>
                        <tr>Start Date      <input type="date" id='startdate' value={this.state.StartDate}
                            onChange={e => this.StartDChange(e.target.value)} /></tr>
                        <tr>Due Date      <input type="date" id='duedate' value={this.state.DueDate}
                            onChange={e => this.IDateChange(e.target.value)} /></tr>
                        <tr>City/State/Zip Code      <input className="text" id='city' value={this.state.City}
                            onChange={e => this.CityChange(e.target.value)} /></tr>
                        <tr>Lock Box Number     <input className="text" id='lockboxnumber' value={this.state.LBNum}
                            onChange={e => this.LBNumChange(e.target.value)} /></tr>
                        <tr>Note <input className="text" id='assetnum' value={this.state.Note}
                            onChange={e => {
                                this.setState({ Note: e.target.value });
                            }} /></tr>
                        <tr>BillTo <input className="text" id='assetnum' value={this.state.BillTo}
                            onChange={e => {
                                this.setState({ BillTo: e.target.value });
                            }} /></tr>
                        <tr>
                            Description
                            <textarea id='description' value={this.state.Desc}
                                onChange={e => this.DescChange(e.target.value)} style={{
                                    width: "425px",
                                    height: "140px",
                                    resize: "none"
                                }}>
                            </textarea>
                        </tr>

                    </table>

                    {/* <div id="myModal" className="modal">
                        <div className="modal-content">
                            <span className="close">&times;</span>
                            <table>
                                <tr>Category <input className="text" id='cate' /></tr>
                                <tr>Item <input className="text" id='item' /></tr>
                                <tr>Description <input className="text" id='description' /></tr>
                                <tr>QTY      <input className="text" id='qty' /></tr>
                                <tr>UM <input className="text" id='um' /></tr>
                                <tr>PPU <input className="text" id='ppu' /></tr>
                                <tr>Cost <input className="text" id='cost' /></tr>
                            </table>
                            <button title="submit" onClick={this.submitItem}>Submit</button>
                        </div>
                    </div>
                    <div id="myModal2" className="modal">
                        <div className="modal-content">
                            <span className="close">&times;</span>
                            <table>
                                <tr>Category <input className="text" id='delcate' /></tr>
                                <tr>Item <input className="text" id='delitem' /></tr>

                            </table>
                            <button title="submit" onClick={this.confirmDel}>Submit</button>
                        </div>
                    </div> */}
                    {this.state.Item.map(this.mapItem)}
                    <button style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '430px',
                        height: '25px',
                    }} onClick={this.addaddItem} title="add item">AddItem</button>
                </div>
                <div id='show' className='page'>
                    {this.showTable()}

                </div>
            </div>

        );
    }

    protected mentionSave(){
        window.setInterval(function () {
            alert("save");
            
        }, 5000);
    }

    protected exportJson() {
        const uniqueIdSmall = () => {
            return '_' + Math.random().toString(36).substring(2, 9);
        };
        
        if(this.state.Stage ==='1'){
            let json = {
                invoice: '0',
                billTo: this.state.Note,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.DueDate,
                item: [],
                tax: 0,
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address+"-bid.rpni");
            FileSaver.saveAs(file);
        }
        else if(this.state.Stage ==='2'){
            let json = {
                invoice: this.state.LBNum,
                billTo: this.state.uploadLink,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.DueDate,
                item: [],
                tax: 0,
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address+"-workorder.rpni");
            FileSaver.saveAs(file);
        }
        else if(this.state.Stage ==='3'){
            let json = {
                invoice: this.state.Invoice,
                billTo: this.state.BillTo,
                address: this.state.Address,
                completionDate: this.state.CompletionDate,
                invoiceDate: this.state.DueDate,
                item: [],
                tax: 0,
            }
            for (let each of this.state.Item) {
                json.item.push({
                    description: each.description,
                    unique: uniqueIdSmall(),
                    amount: each.Cost,
                    taxable: each.Taxable,
                    before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
                    during: [...each.During ? each.During.map((picture) => picture.Src) : []],
                    after: [...each.After ? each.After.map((picture) => picture.Src) : []]
                })
            }
            var file = new File([JSON.stringify(json)], this.state.Address+"-invoice.rpni");
            FileSaver.saveAs(file);
        }

        // for (let each of this.state.Item) {
        //     json.item.push({
        //         description: each.description,
        //         unique: uniqueIdSmall(),
        //         amount: each.Cost,
        //         taxable: each.Taxable,
        //         before: [...each.Before ? each.Before.map((picture) => picture.Src) : []],
        //         during: [...each.During ? each.During.map((picture) => picture.Src) : []],
        //         after: [...each.After ? each.After.map((picture) => picture.Src) : []]
        //     })
        // }
        // var file = new File([JSON.stringify(json)], "rpn.rpni");
        // FileSaver.saveAs(file);

    }

    protected initItem() {
        return {
            After: [],
            Amount: 0,
            During: [],
            Process: '',
            Status: '',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: '',
            Comments: '',
            Item: 0,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,
            Before: []
        }
    }

    protected addaddItem() {
        let list = this.state.Item;
        list.push(this.initItem());
        this.setState({ Item: list });
    }

    protected mapItem(value, index) {
        const addBefore = () => {

        }
        return (
            <div key={index}>
                <div className="insert">
                    <button style={{
                        marginTop: '10px',
                        marginLeft: '10px',
                        width: '430px',
                        height: '25px',
                    }}
                        onClick={() => {
                            let list = this.state.Item;
                            list.splice(index, 0, this.initItem());
                            this.setState({ Item: list });
                        }}>AddItem</button>
                </div>
                <React.Fragment>
                    <div className="itemTop">
                        <div className="right">
                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                width: '65px',
                                height: '25px',
                            }}
                                className="bigger" onClick={() => {
                                    let list = this.state.Item;
                                    list.splice(index, 1);
                                    this.setState({ Item: list });
                                }} title="delete">Delete</button>
                            <button style={{
                                marginTop: '10px',
                                marginLeft: '10px',
                                width: '65px',
                                height: '25px',
                                backgroundColor:this.state.Item[index].Taxable==true ? 'red':'blue'
                            }}
                                className={value.taxable ? "check" : "uncheck"} onClick={() => {
                                    let list = this.state.Item;
                                    list[index].Taxable = !list[index].Taxable;
                                    console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="tax">Tax</button>
                        </div>
                        <div style={{
                            marginLeft: '10px'
                        }}
                            className="left"><h4>{this.state.Item[index].Cate} - {this.state.Item[index].Item}</h4></div>
                    </div>
                    <table>
                        <tr>Category <input className="text" id='cate' value={value.Cate}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Cate = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Item <input className="text" id='item' value={value.Item}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Item = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Description <textarea id='description' value={value.description}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].description = e.target.value;
                                this.setState({ Item: list });
                            }}
                            style={{
                                width: "345px",
                                height: "100px",
                                resize: "none"
                            }}>
                        </textarea></tr>
                        <tr>QTY <input className="text" id='qty' value={value.Qty}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Qty = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>UM <input className="text" id='um' value={value.UM}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].UM = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>PPU <input className="text" id='ppu' value={value.PPU}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].PPU = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>Cost <input className="text" id='cost' value={value.Cost}
                            onChange={e => {
                                let list = this.state.Item;
                                list[index].Cost = e.target.value;
                                this.setState({ Item: list });
                            }} /></tr>
                        <tr>
                            Before:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',


                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addBeforePicture(e.target.files, index) }} />
                            {this.state.Item[index].Before.map(function (pic, key) {
                                return (
                                    <React.Fragment>
                                    <tr key={key}>
                                        <td>{key + 1}:<button style={{
                                            //marginLeft: '10px',
                                        }} onClick={() => {
                                            let list = this.state.Item;
                                            list[index].Before.splice(key, 1);
                                            this.setState({ Item: list });
                                        }}>Del</button></td>
                                        <td>{pic.Name}</td>
                                    </tr>
                                    </React.Fragment>
                                )
                            }.bind(this))}
                        </tr>
                        <tr>
                            During:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',


                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addDuringPicture(e.target.files, index) }} />
                            {this.state.Item[index].During.map(function (pic, key) {
                                return (
                                    <tr key={key}>
                                        <td>{key + 1}:<button style={{
                                            //marginLeft: '10px',
                                        }} onClick={() => {
                                            let list = this.state.Item;
                                            list[index].During.splice(key, 1);
                                            this.setState({ Item: list });
                                        }}>Del</button></td>
                                        <td>{pic.Name}</td>

                                    </tr>
                                )
                            }.bind(this))}
                        </tr>
                        <tr>
                            After:
                            <input
                                style={{
                                    marginTop: '10px',
                                    marginLeft: '30px',


                                }}
                                type="file" multiple id="fileUpload" onChange={(e) => { this.addAfterPicture(e.target.files, index) }} />
                            {this.state.Item[index].After.map(function (pic, key) {
                                return (
                                    <tr key={key}>
                                        <td>{key + 1}:<button style={{
                                            //marginLeft: '10px',
                                        }} onClick={() => {
                                            let list = this.state.Item;
                                            list[index].After.splice(key, 1);
                                            this.setState({ Item: list });
                                        }}>Del</button></td>
                                        <td>{pic.Name}</td>
                                    </tr>
                                )
                            }.bind(this))}
                        </tr>
                    </table>
                    <div className="picture">

                    </div>
                </React.Fragment>
            </div>
        )
    }
    protected addAfterPicture(Files: FileList, index: number) {

        for (let i = 0; i < Files.length; i++) {
            var formData = new FormData();
            formData.append('image', Files[i]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    console.log(result);
                    let list = this.state.Item;
                    list[index].Before.push({
                        Name: Files[i].name,
                        Format: '',
                        Cate: list[index].Cate,
                        itemId: list[index].Item,
                        Src: result
                    });
                    this.setState({ Item: list });
                }.bind(this),
            });
        }

    }

    protected addDuringPicture(Files: FileList, index: number) {

        for (let i = 0; i < Files.length; i++) {
            var formData = new FormData();
            formData.append('image', Files[i]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    console.log(result);
                    let list = this.state.Item;
                    list[index].Before.push({
                        Name: Files[i].name,
                        Format: '',
                        Cate: list[index].Cate,
                        itemId: list[index].Item,
                        Src: result
                    });
                    this.setState({ Item: list });
                }.bind(this),
            });
        }

    }

    protected addBeforePicture(Files: FileList, index: number) {

        for (let i = 0; i < Files.length; i++) {
            var formData = new FormData();
            formData.append('image', Files[i]);
            //console.log(Files[i].name);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    //console.log(Files[i].name);
                    let list = this.state.Item;
                    list[index].Before.push({
                        Name: Files[i].name,
                        Format: '',
                        Cate: list[index].Cate,
                        itemId: list[index].Item,
                        Src: result
                    });
                    this.setState({ Item: list });
                }.bind(this),
            });
        }

    }

    protected confirmDel() {
        console.log($('#delcate').val());
        console.log($('#delitem').val());
        $.ajax({
            url: 'https://rpntechserver.appspot.com/deleteItem?task_id=' + localStorage.getItem("currTask") + "&cate=" + $('#delcate').val() + "&item=" + $('#delitem').val(),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            success: function (data) {
                console.log(data);
                location.reload();
            }.bind(this),
        });
    }

    protected deleteItem() {
        var modal = document.getElementById('myModal2');
        modal.style.display = "block";
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    }

    protected submitItem() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/addItem?task_id=' + localStorage.getItem('currTask'),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                cate: $('#cate').val(),
                item: parseInt($('#item').val(), 10),
                description: $('#description').val(),
                qty: parseInt($('#qty').val(), 10),
                um: $('#um').val(),
                ppu: parseFloat($('#ppu').val()),
                cost: parseFloat($('#cost').val()),
                taxable: true,
                tax: parseFloat('7'),
                comments: "test",
                before: [],
                during: [],
                after: []

                //stage:$('#stage').val()
            }),
            success: function (data) {
                console.log(data);
                location.reload();
            }.bind(this),
        });
    }

    protected addItem() {
        var modal = document.getElementById('myModal');

        // Get the button that opens the modal
        var btn = document.getElementById("myBtn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal 
        modal.style.display = "block";
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }


    }

    protected formatDate(date) {

    }

    protected showCurrStage() {
        console.log(this.state.Stage);

        if (this.state.Stage === '0') {
            return (<div>Current Stage is : Initial</div>);
        }
        else if (this.state.Stage === '1') {
            return (<div>Bid</div>);
        }
        else if (this.state.Stage === '2') {
            return (<div>Work Order</div>);
        }
        else if (this.state.Stage === '3') {
            return (<div>Invoice</div>);
        }
        else {
            return (<div>Done</div>);
        }
    }


    protected readJson(selectorFiles: FileList) {
        var json;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            var test = event.target.result;
            console.log(test);
            //json = JSON.parse(event.target.result);
            //console.log(json);
            //json = JSON.stringify(json);
            //console.log(json);
            console.log(localStorage.getItem('currTask'));
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/parseJson',
                url: 'https://rpntechserver.appspot.com/parseJson?task_id=' + localStorage.getItem('currTask'),
                method: 'POST',
                datatype: "json",
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: test,
                success: function (data) {
                    console.log(data);
                    //this.props.history.push('/main');
                }.bind(this),
            });
        }.bind(this);
        reader.readAsText(file);

    }

    protected mapShowItem(value, index){
        const mapShowPicture = (picture , pIndex)=>{
            this.count = this.count+1;
            return (
                <div key={pIndex} style={{
                    flex: 1,
                    position: 'relative',
                    // minWidth: '33%',
                    minWidth: '180px',
                    maxWidth: '180px',
                    padding: '2px',
                    //marginLeft:'20px',
                    //marginTop:'0px',
                }} >
                    <img
                        style={{
                            // position: 'static',
                            width: '95%',
                            height: 'auto',
                            marginLeft:'3px',
                            //marginTop:'0px',
                            border: '1px solid black',
                        }}
                        src={picture}
                    />
                    <div>{this.count}</div>
                    <div>{this.state.Item[index].description}</div>
                    
                </div>
            );
        };

        const buildShowPicture = (pictureE:any[])=>{
            this.count=0;
            const picture = [...pictureE];
            let pictureList: any[] = [];
            let tempList: string[] = [];
            let key: number = 0;
            while (picture.length > 0) {
                /**
                 * FOR MAINTAINER
                 * FOR KEY! this is a bad practice, due to key change, the entire component list may rendered again due to small change.
                 * TOFIXIT: use individual key value.
                 */
                if (tempList.length >= 3) {
                    pictureList.push(<tr key={key++}>
                        <td >
                            <div >
                                <div style={{
                                    display: 'flex',
                                    flexWrap: 'wrap',
                                    justifyContent: 'center',
                                }}>{tempList.map(mapShowPicture)}</div>
                            </div>
                        </td>
                    </tr>);
                    tempList = [];
                }
                tempList.push(picture.shift());
            }
            if (tempList.length > 0) {
                pictureList.push(<tr key={key}>
                    <td>
                        <div>
                            <div style={{
                                display: 'flex',
                                flexWrap: 'wrap',
                                justifyContent: 'center',
                            }}>{tempList.map(mapShowPicture)}</div>
                        </div>
                    </td>
                </tr>);
            }
            return pictureList;
        };

        return (<React.Fragment key={index}><tr>
            <td>
                <div style={{
                    padding: '3px',
                }}>{index + 1}.&nbsp;{value.description}</div>
            </td>
            <td style={{
                
                padding: '3px',
                fontWeight: 'bold',
            }}>
                <div style={{ display: 'flex' }}>
                    <div>$</div>
                    <div style={{ flex: 1, textAlign: 'right' }}>
                        {value.amount ? value.amount.toFixed(2) : 0}
                    </div>
                </div>
            </td>
        </tr>
            {value.before.length > 0 ?
            
                <React.Fragment>
                    <tr>
                        <td colSpan={2}>Before</td>
                    </tr>
                    {buildShowPicture(value.before)}
                    
                </React.Fragment>
                : void 0}
            {value.during.length > 0 ?
                <React.Fragment>
                    <tr>
                        <td colSpan={2}>During</td>
                    </tr>
                    {buildShowPicture(value.during)}
                </React.Fragment>
                : void 0}

            {value.after.length > 0 ?
                <React.Fragment>
                    <tr>
                        <td colSpan={2}>After</td>
                    </tr>
                    {buildShowPicture(value.after)}
                </React.Fragment>
                : void 0}
        </React.Fragment>);

        
    }

    protected showTable() {
        if (this.state.Stage === '0') {
            return <div><table id="stage0">
                <tr ><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                <tr><td style={{ width: "25%" }}>Asset Number</td> <td>{this.state.AssetNum}</td></tr>
                <tr><td style={{ width: "25%" }}>Start Date</td><td>{this.state.StartDate}</td></tr>
                <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                <tr><td style={{ width: "25%" }}>Description </td><td>{this.state.Desc}</td></tr>
                <tr><td style={{ width: "25%" }}>Lock Box Number</td> <td>{this.state.LBNum}</td></tr>
            </table>
            </div>
        }
        else if (this.state.Stage === '1') {
            return <div><table id="stage1" style={{
                tableLayout: "fixed",
                wordWrap: "break-word"
            }}>
                <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                <tr><td style={{ width: "25%" }}>Asset Number:</td> <td>{this.state.AssetNum}</td></tr>
                <tr><td style={{ width: "25%" }}>Start Date:</td><td>{this.state.StartDate}</td></tr>
                <tr><td style={{ width: "25%" }}>Due Date:</td><td>{this.state.DueDate}</td></tr>
                <tr><td style={{ width: "25%" }}>City/State/Zip Code: </td><td>{this.state.City}</td></tr>
                <tr><td style={{ width: "25%" }}> Description:</td><td>{this.state.Desc}</td></tr>
                <tr><td style={{ width: "25%" }}>Lock Box Number:</td> <td>{this.state.LBNum}</td></tr>
            </table>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Process</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {
                        return (
                            <React.Fragment key={key}>
                                <tr>
                                    <td>{item.Cate}</td>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                    <td>{this.showProcess(item.Process)}</td>
                                    <td>{this.showStatus(item.Status)}</td>
                                </tr>
                                <th>Before </th>
                                <tr>{this.mapPicture(item.Before,item.description)}</tr>
                                <th> During </th>
                                <tr>{this.mapPicture(item.During,item.description)}</tr>
                                <th> After </th>
                                <tr>{this.mapPicture(item.After,item.description)}</tr>

                            </React.Fragment>
                        )
                    }.bind(this))}
                    </tbody>
                    {/* <tbody>
                        {this.state.Item.map(this.mapShowItem)}
                    </tbody> */}
                </table>
            </div>
        }
        else if (this.state.Stage === '2') {
            return <div style={{
            }}>
                <table id="stage2">
                    <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>KeyCode/LockBoxNum</td><td>{this.state.LBNum}</td></tr>
                    <tr><td style={{ width: "25%" }}>Due Date</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>City/State/Zip Code </td><td>{this.state.City}</td></tr>
                    <tr><td style={{ width: "25%" }}>UploadLink</td><td>{this.state.uploadLink}</td></tr>
                </table>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Process</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {
                        return (
                            <React.Fragment>
                                <tr key={key}>
                                    <td>{item.Cate}</td>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                    <td>{this.showProcess(item.Process)}</td>
                                    <td>{this.showStatus(item.Status)}</td>
                                </tr>
                                <th> Before </th>
                                <tr>{this.mapPicture(item.Before,item.description)}</tr>
                                <th> During </th>
                                <tr>{this.mapPicture(item.During,item.description)}</tr>
                                <th> After </th>
                                <tr>{this.mapPicture(item.After,item.description)}</tr>
                            </React.Fragment>
                        )
                    }.bind(this))}
                    </tbody>
                </table>
            </div>
        }
        else if (this.state.Stage === '3') {
            return <div style={{
            }}>
                <table id="stage3">
                    <tr><td style={{ width: "25%" }}>Property Address:</td> <td>{this.state.Address}</td></tr>
                    <tr><td style={{ width: "25%" }}>Invoice Number</td> <td>{this.state.Invoice}</td></tr>
                    <tr><td style={{ width: "25%" }}>CompletionDate</td><td>{this.state.CompletionDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>Invoice Date</td><td>{this.state.DueDate}</td></tr>
                    <tr><td style={{ width: "25%" }}>BillTo </td><td>{this.state.BillTo}</td></tr>
                </table>
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Process</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.Item.map(function (item, key) {
                        return (
                            <React.Fragment>
                                <tr key={key}>
                                    <td>{item.Cate}</td>
                                    <td>{item.Item}</td>
                                    <td>{item.description}</td>
                                    <td>{item.Cost}</td>
                                    <td>{this.showProcess(item.Process)}</td>
                                    <td>{this.showStatus(item.Status)}</td>
                                </tr>
                                <th> Before </th>
                                <tr>{this.mapPicture(item.Before,item.description)}</tr>
                                <th> During </th>
                                <tr>{this.mapPicture(item.During,item.description)}</tr>
                                <th> After </th>
                                <tr>{this.mapPicture(item.After,item.description)}</tr>
                            </React.Fragment>
                        )
                    }.bind(this))}
                    </tbody>
                </table>
            </div>
        }
        else if (this.state.Stage === '4') {

        }
        else {
            return <div> done </div>
        }
    }

    protected mapPicture(picture: any[],desc: string) {
        return (
            picture.map(function (item, key) {
                return (
                    <div>
                        <img style={{
                            width: '40%',
                            height: 'auto',
                            
                            padding: '3px'
                        }}
                            src={item.Src} />
                            {key+1}.{desc}
                            
                            </div>
                    



                )
            }.bind(this))
        )
    }

    protected printPDF() {
        var divToPrint = document.getElementById('show');
        var popupWin = window.open('', '_blank', 'width=300,height=300');
        popupWin.document.open();
        popupWin.document.write('<html><body onload="window.print()">' + divToPrint.innerHTML + '</html>');
        popupWin.document.close();
    }

    protected downloadBefore() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.Before;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });

        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, "example.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;


    }
    protected test(url: string) {
        window.location.href = url;
    }

    protected downloadDuring() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.During;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });

        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, "example.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;



    }

    protected downloadAfter() {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();
        var urls = this.state.After;
        // find every checked item
        urls.forEach(function (url) {
            console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });

        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, "example.zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;

    }

    protected showProcess(value) {
        if (value === '0') {
            return (<div>Imcomplete</div>);
        }
        else {
            return (<div>Done</div>);
        }
    }

    protected showStatus(value) {
        if (value === '0') {
            return "Incomplete"
        }
        else {
            return "Done"
        }
    }

    protected uploadLinkChange(value) {
        this.setState({
            uploadLink: value
        })
    }

    protected NoteChange(value) {
        this.setState({
            Note: value
        });
    }

    protected DescChange(value) {
        this.setState({
            Desc: value
        })
    }

    protected LBNumChange(value) {
        this.setState({
            LBNum: value
        })
    }

    protected changeStage(value) {
        console.log(value);
        this.setState({
            Stage: value
        });
    }
    protected changeStage2() {

        let temp = parseInt(this.state.Stage, 10);
        let result = temp + 1;

        console.log(temp);
        this.setState({
            Stage: result.toString()
        });
    }
    protected IDateChange(value) {
        this.setState({
            DueDate: value
        });
    }
    protected CDateChange(value) {
        this.setState({
            CompletionDate: value
        });
    }
    protected BillToChange(value) {
        this.setState({
            BillTo: value
        });
    }
    protected InvoiceChange(value) {
        this.setState({
            Invoice: value
        });
    }
    protected handleChange(selectorFiles: FileList) {
        var data;
        var file = selectorFiles[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            data = JSON.parse(event.target.result);
            //let test = data;
            console.log(data);
            let allitem = [];
            let count = 0;

            for (let i = 0; i < Object.keys(data.list).length; i++) {
                //console.log(data.list[i]);
                let cate = data.list[i].cate;
                //console.log(cate);
                for (let j = 0; j < Object.keys(data.list[i].each).length; j++) {
                    //console.log(data.list[i].each[j])
                    let eachitem = {
                        After: [],
                        Amount: 0,
                        During: [],
                        Process: '',
                        Status: '',
                        Tax: 0,
                        Taxable: false,
                        Description: '',
                        Cate: '',
                        Comments: '',
                        Item: 0,
                        Qty: 0,
                        UM: '',
                        PPU: 0,
                        Cost: 0,
                        Before: []
                    }
                    eachitem.Item = j + 1;
                    eachitem.Description = data.list[i].each[j].description;
                    eachitem.Cate = cate;
                    eachitem.Comments = data.list[i].each[j].comments;
                    eachitem.Qty = data.list[i].each[j].qty;
                    eachitem.UM = data.list[i].each[j].UM;
                    eachitem.PPU = data.list[i].each[j].PPU;
                    eachitem.Cost = data.list[i].each[j].cost;
                    //console.log(data.list[i].each[j].image);
                    if (data.list[i].each[j].image !== undefined) {
                        for (let k = 0; k < Object.keys(data.list[i].each[j].image).length; k++) {
                            let pic = {
                                Cate: '',
                                Name: '',
                                Src: '',
                                itemID: 0,
                                Format: ''
                            }
                            pic.Cate = cate;
                            pic.Name = data.list[i].each[j].image[k].name;
                            pic.Src = data.list[i].each[j].image[k].src;
                            pic.itemID = j + 1;
                            eachitem.Before.push(pic);
                        }
                    }
                    allitem.push(eachitem);

                }
            }
            //console.log(allitem);
            this.setState({ Address: data.address });
            this.setState({ City: data.city });
            this.setState({ Year: data.year });
            this.setState({ Area: data.area });
            this.setState({ TotalCost: data.totalCost });
            this.setState({ Item: allitem });
            console.log(this.state);
            let aata = JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: this.state.StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,


            })
            console.log(JSON.parse(aata));


        }.bind(this);
        reader.readAsText(file);
        //console.log(data);
    }
    protected AddrChange(value) {
        this.setState({
            Address: value
        });
    }
    protected AssetChange(value) {
        this.setState({
            AssetNum: value
        });
    }
    protected StartDChange(value) {
        this.setState({
            StartDate: value
        });
    }
    protected StageChange(value) {
        this.setState({
            Stage: value
        });
    }
    protected CityChange(value) {
        this.setState({
            City: value
        });
    }
    protected logout() {

    }
    protected changeStatus() {
        this.props.history.push("/main");
    }
    protected addTask() {

    }


    protected submitTask() {
        var temp;
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: this.state.StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,


            }),
            success: function (data) {
                console.log(JSON.parse(data));
                this.props.history.push('/main');
            }.bind(this),
        });
    }
}

export default PageGhotiEdittask;
