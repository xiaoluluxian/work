/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiMain
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from "./logo";
import wflogo from "./wflogo";
import { IItem, IPage } from './interface';
import * as $ from 'jquery';
import { Table, Column, HeaderCell, Cell } from 'rsuite-table';
import { Redirect } from 'react-router-dom'
import * as ReactDOM from 'react-dom'
// import "datatables.net"

//import { Button } from 'reactstrap'
//import "bootstrap/dist/css/bootstrap.min.css";
//import {FontAwesomeIcon} from '@fortawesome/fontawesome-free'
//import Bootstrap from 'bootstrap/dist/css/bootstrap.css';



import Config from '../config/config';


export interface IProps {
    page: IPage;
    history: any;
}

export interface IState {
}

class PageGhotiMain extends React.Component<IProps, IState> {
    state = {
        data: [],
        alluser: [],
        clients: [],
        allTasks: [],
        currPageSize: "25",
        currPage: 0,
        searchAddr: ""
    };
    public constructor(props) {
        super(props);
        this.search = this.search.bind(this);
        this.addTask = this.addTask.bind(this);
        this.editTask = this.editTask.bind(this);
        this.setState = this.setState.bind(this);
        this.delTask = this.delTask.bind(this);
        this.register = this.register.bind(this);
        this.showSetTask = this.showSetTask.bind(this);
        this.test = this.test.bind(this);
        this.delUser = this.delUser.bind(this);
        this.userProfile = this.userProfile.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.changeStatus = this.changeStatus.bind(this);
        this.ordertask = this.ordertask.bind(this);
        this.showOperation = this.showOperation.bind(this);
        this.showTable = this.showTable.bind(this);
        this.ClientChange = this.ClientChange.bind(this);
        this.changePage = this.changePage.bind(this)

    }

    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllUsers',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //console.log(result);
                this.setState({ alluser: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllClient',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.setState({ clients: result });

            }).bind(this),
        });
        if (localStorage.getItem('Authority') === '2' || '3') {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findAllTasks',

                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    console.log(result);
                    this.setState({ allTasks: result });

                }).bind(this),
            });

            $.ajax({
                url: 'https://rpntechserver.appspot.com/findTasksByPage?page_index=0&page_size=25&stages=current',

                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });

        }
        else if (localStorage.getItem('Authority') === '1') {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/userProfile',

                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });
        }

    }


    public render() {
        let pages = Math.ceil(this.state.allTasks.length / parseInt(this.state.currPageSize));
        let buttonList = []
        for (let i = 0; i < pages; i++) {
            buttonList.push(i + 1)
        }


        return (
            <div className="main">
                <div className="title">
                    <div style={{
                        display: 'flex',
                        height: '100px',
                        alignItems: 'center',
                        width: '100%',
                        marginLeft: "10px"
                    }}>
                        <img src={logo} alt="logo" style={{
                            width: '70px',
                            height: '50px',
                        }} />
                        <div style={{
                            flex: 1,
                            paddingLeft: '10px',
                            paddingTop: '20px',
                            display: 'inline',
                            fontSize: '20px',
                            color: 'darkblue',
                            fontWeight: 'bold',
                        }}>
                            Repair and Preservation Network, LLC
                </div>
                        {/* <div style={{
                            marginTop: '20px',
                            marginRight: '20px',
                            textAlign: 'center',
                            width: '30%'

                        }}>
                            <input type="text" id="myInput" onKeyUp={this.search} placeholder="Search for Addr.." title="Search Task" />
                        </div> */}
                        <div style={{
                            marginTop: '20px',
                            marginRight: '10px',
                            textAlign: 'right',
                        }}>

                        </div>
                    </div>
                </div>
                <div className="space">
                    <div style={{
                        alignItems: 'center',
                        textAlign: 'center',
                        marginTop: '10px',
                        width: '100%',
                    }}>
                        Welcome to Repair and Preservation Network Company!
                    {this.date}
                    </div>
                </div>
                <div className="menu">
                    <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Show Task" onClick={this.showTask}><ins>Show Task</ins></button>
                    </div>
                    {this.showOperation()}


                    <div style={{
                        padding: '10px',
                    }}>
                        <div>User:
                    <select style={{
                                width: "100px"
                            }}
                                id='setUser' onChange={e => this.UserChange(e.target.value)}>
                                <option>all</option>
                                {this.state.alluser.map(function (item, key) {
                                    return (
                                        <option key={key}>{item.Firstname}</option>
                                    )
                                }.bind(this))}
                            </select>
                        </div>
                    </div>
                    <div style={{
                        padding: '10px',
                    }}>
                        <div>Clients:
                    <select style={{
                                width: "100px"
                            }}
                                id='setUser' onChange={e => this.ClientChange(e.target.value)}>
                                <option>All</option>
                                {this.state.clients.map(function (item, key) {
                                    return (
                                        <option key={key}>{item.Company}</option>
                                    )
                                }.bind(this))}
                            </select>
                        </div>
                    </div>

                    <div style={{

                        // borderColor:"black"
                    }}>
                        <div>SortBy:
                    <select style={{
                                width: "100px"
                            }}
                                id='sorttask' onChange={e => this.sortTable(e.target.value)}>
                                <option>Default</option>
                                <option>DueDate</option>

                            </select>
                        </div>
                    </div>
                    <div style={{
                        padding: '10px'
                    }}>
                        <div>ShowOnly:
                    <select style={{
                                width: "100px"
                            }}
                                id='showbystage' onChange={e => this.showByStage(e.target.value)}>
                                <option value="-1">All</option>
                                <option value="0">Initial</option>
                                <option value="1">Bid</option>
                                <option value="2">Work Order</option>
                                <option value="3">Invoice</option>
                                <option value="4">Pending Accounting Review</option>
                                <option value="5">Complete</option>
                                <option value="6">Archived</option>
                            </select>
                        </div>
                    </div>

                </div>
                <div style={{
                    width: "99%",
                    margin: "auto",
                    marginTop: "10px",
                    border: '1px solid grey',
                }}>
                    <div style={{ marginLeft: "10px", marginTop: "10px" }}>
                    Show 
                        <select style={{marginLeft:"3px", marginRight:"3px"}}onChange={e => this.changePageSize(e.target.value)}>
                            <option>25</option>
                            <option>50</option>
                            <option>100</option>
                            <option>all</option>
                        </select>
                         Entries
                        <input style={{
                            float: "right",
                            marginRight: "5px"
                        }} type="text" id="myInput"
                            onChange={event => { this.setState({ searchAddr: event.target.value }) }}
                            onKeyPress={event => {
                                if (event.key === 'Enter') {
                                    // console.log(this.state.searchAddr)
                                    
                                    $.ajax({
                                        url: 'https://rpntechserver.appspot.com//findTaskByAddr?address='+this.state.searchAddr,
                                        headers: {
                                            Authorization: "Bearer " + localStorage.getItem('Token'),
                                        },
                                        method: 'GET',
                                        datatype: "json",
                                        data: JSON.stringify({
                                        }),
                                        success: (function (result) {
                                            if(result){
                                                this.setState({ data: result });
                                            }
                                            else{
                                                window.alert("No such Property!!!!")
                                            }
                                            
                                        }).bind(this),
                                    });
                                }
                            }}
                            placeholder="Search for Addr.." title="Search Task" />

                    </div>
                    {this.showTable()}
                    <div>
                        {buttonList.map(function (item, key) {
                            if(this.state.currPage===key){
                                return (
                                    <button key={key} style={{
                                        marginLeft: "10px",
                                        marginBottom: "10px",
                                        width: "40px",
                                        height: "40px",
                                        backgroundColor:"#003366"
                                    }}
                                        onClick={this.changePage.bind(this, item - 1)}
                                    >{item}</button>
                                )
                            }
                            else{
                                return (
                                    <button key={key} style={{
                                        marginLeft: "10px",
                                        marginBottom: "10px",
                                        width: "40px",
                                        height: "40px"
                                    }}
                                        onClick={this.changePage.bind(this, item - 1)}
                                    >{item}</button>
                                )
                            }
                            
                        }.bind(this))}
                    </div>
                </div>
            </div >);
    }

    protected changePageSize(size) {
        this.setState({ currPageSize: size })
        this.setState({ currPage: "0" })
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTasksByPage?page_index=0&page_size=' + size + '&stages=current',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                console.log(result);
                this.setState({ data: result });

            }).bind(this),
        });
    }

    protected changePage(pageNum) {
        this.setState({ currPage: pageNum })
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTasksByPage?page_index=' + pageNum + '&page_size=' + this.state.currPageSize + '&stages=current',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                console.log(result);
                this.setState({ data: result });

            }).bind(this),
        });
    }

    protected ClientChange(client) {
        console.log(client);
        if (client === 'all') {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findAllTasks',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });
        }
        else {

            //console.log(newname);
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/userProfile',
                url: 'https://rpntechserver.appspot.com/findTaskByClient?company=' + client,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });
        }
    }

    protected showTable() {
        if (localStorage.getItem("Authority") === '3') {
            return (
                <table style={{ marginTop: "15px", width: "99%" }} className="table table-striped table-hover table-bordered table-sm" id='taskT'>
                    <thead>
                        <tr><th >Action</th>
                            <th>Property Address</th>
                            <th>Asset Number</th>
                            <th>Due Date</th>

                            <th>CurrStage</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.data.map(function (item, key) {
                        let temp = '#a' + key;
                        let temp2 = 'a' + key;
                        // console.log(temp2);
                        // console.log(temp);
                        return (

                            <tr key={key}>
                                <td><button style={{
                                    marginRight: '5px',
                                    marginTop: '5px'
                                }} title="edit" className="btn btn-primary btn-sm" onClick={this.editTask.bind(this, item)}><ins>Edit</ins></button>
                                    {this.showSetTask(item)}
                                    {/* <button title="deltask" onClick={this.delTask.bind(this, item)}>Del</button> */}
                                </td>
                                <td>{this.showLogo}
                                    <img src={wflogo} alt="wflogo"
                                        style={{
                                            marginRight: "3px"
                                        }} />
                                    {item.Address}</td>
                                <td>{item.asset_num}</td>
                                <td>{item.DueDate}</td>
                                {/* <td><a data-toggle="collapse" href={temp}>Show User</a><div id={temp2} className="panel-collapse collapse">{this.showUsername(item.Username)}</div></td> */}
                                {/* <td><button className="link collapsible">{this.clickShowUser}Show User</button><div id="content" style={{display: "none"}}>{this.showUsername(item.Username)}</div></td> */}
                                {/* <td>{item.Stage}</td> */}
                                <td>{this.showStage(item.Stage)}</td>
                                <td>{this.showStatus(item)}</td>
                            </tr>
                        )

                    }.bind(this))}</tbody>
                </table>

            )

        }
        else {
            return (
                <table className="table table-striped table-hover table-bordered table-sm" id='taskT' style={{ marginTop: "15px", width: "99%" }}>
                    <thead>
                        <tr><th style={{width:"10%"}}>Action</th>
                            <th>Property Address</th>
                            <th>Asset Number</th>
                            <th>Due Date</th>
                            <th>User</th>
                            <th>CurrStage</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>{this.state.data.map(function (item, key) {
                        let temp = '#a' + key;
                        let temp2 = 'a' + key;
                        // console.log(temp2);
                        // console.log(temp);
                        return (

                            <tr key={key}>
                                <td><button style={{
                                    marginRight: '5px',
                                    marginTop: '5px'
                                }} title="edit" className="btn btn-primary btn-sm" onClick={this.editTask.bind(this, item)}><ins>Edit</ins></button>
                                    {this.showSetTask(item)}
                                    {/* <button title="deltask" onClick={this.delTask.bind(this, item)}>Del</button> */}
                                </td>
                                <td>
                                    <img src={wflogo} alt="wflogo"
                                        style={{
                                            marginRight: "3px"
                                        }} />
                                    {item.Address}</td>
                                <td>{item.asset_num}</td>
                                <td>{item.DueDate}</td>
                                {/* <td><a data-toggle="collapse" href={temp}>Show User</a><div id={temp2} className="panel-collapse collapse">{this.showUsername(item.Username)}</div></td> */}
                                <td><button style={{ color: "blue" }} className="link" onClick={this.showUsernameHelp.bind(this, temp2)}><ins>Show User</ins></button><div id={temp2} style={{ display: "none" }} className="user-dropdown">{this.showUsername(item.Username)}</div></td>
                                {/* <td><button className="link collapsible">{this.clickShowUser}Show User</button><div id="content" style={{display: "none"}}>{this.showUsername(item.Username)}</div></td> */}
                                {/* <td>{item.Stage}</td> */}
                                <td>{this.showStage(item.Stage)}</td>
                                <td>{this.showStatus(item)}</td>
                            </tr>
                        )

                    }.bind(this))}</tbody>
                </table>
            )

        }
    }

    protected showUsernameHelp(id) {
        let ops = document.getElementById(id);
        // console.log(ops.innerText);
        if (ops.style.display === "none") {
            ops.setAttribute("style", "display: show");
            // console.log(1);
        }
        else {
            ops.style.display = "none"
        }
        // console.log(ops.style.display);
        // console.log(document.getElementById(id).style.display);
    }

    protected showLogo() {

    }

    protected showOperation() {
        if (localStorage.getItem("Authority") === '3') {
            return
        }
        else {
            return (
                <React.Fragment>
                    <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Add Task" onClick={this.addTask}><ins>Add Task</ins></button>
                    </div>
                    <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Register" onClick={this.register}><ins>Register</ins></button>
                    </div>
                    <div style={{
                        margin: '5px',
                    }}>
                        <button className="link" title="Ordertask" onClick={this.ordertask}><ins>OrderTask</ins></button>
                    </div>
                    {/* <div style={{
                        padding: '10px',
                    }}>
                        <button className="link" title="Delete User" onClick={this.delUser}><ins>DelUser</ins></button>
                    </div> */}
                    <div style={{
                        padding: '10px',
                    }}>
                        <button className="link" title="UserProfile" onClick={this.userProfile}><ins>Profile</ins></button>
                    </div>
                    {/* <div style={{
                        padding: '10px',
                    }}>
                        <button className="link" title="test" onClick={this.test}><ins>Test</ins></button>
                    </div> */}

                </React.Fragment>
            )
        }
    }

    protected clickShowUser() {
        var coll = document.getElementsByClassName("link collapsible");
        // console.log(coll);
        var i;
        for (i = 0; i < coll.length; i++) {
            console.log(coll[i]);
            coll[i].addEventListener("onClick", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                console.log(content);
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }
    }

    protected showByStage(stage) {
        // console.log($('#showbystage'));
        if ($('#showbystage').val() === '-1') {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findAllTasks',
                //url: 'https://rpnserver.appspot.com/userProfile',
                //url: 'http://localhost:8080/login',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            })
        }
        else {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findTaskByStage?stage=' + $('#showbystage').val(),
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            })
        }

    }

    protected ordertask() {
        this.props.history.push("/ordertask");
    }

    protected changeStatus(item) {
        console.log(item.TaskID)
        if (item.TaskStatus === '0') {
            var fd = new FormData();
            var st = '1'
            fd.append('task_id', item.TaskID);
            fd.append('status', st);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/markTaskStatus',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'POST',
                datatype: "json",
                data: fd,
                cache: false,
                processData: false,
                contentType: false,
                success: (function (result) {
                    $.ajax({
                        url: 'https://rpntechserver.appspot.com/findAllTasks',
                        //url: 'https://rpnserver.appspot.com/userProfile',
                        //url: 'http://localhost:8080/login',
                        headers: {
                            Authorization: "Bearer " + localStorage.getItem('Token'),
                        },
                        method: 'GET',
                        datatype: "json",
                        data: JSON.stringify({
                        }),
                        success: (function (result) {
                            console.log(result);
                            this.setState({ data: result });

                        }).bind(this),
                    });


                }).bind(this),
            });
        }
        else {
            var fd = new FormData();
            var st = '0'
            fd.append('task_id', item.TaskID);
            fd.append('status', st);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/markTaskStatus',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'POST',
                datatype: "json",
                data: fd,
                cache: false,
                processData: false,
                contentType: false,
                success: (function (result) {
                    $.ajax({
                        url: 'https://rpntechserver.appspot.com/findAllTasks',
                        //url: 'https://rpnserver.appspot.com/userProfile',
                        //url: 'http://localhost:8080/login',
                        headers: {
                            Authorization: "Bearer " + localStorage.getItem('Token'),
                        },
                        method: 'GET',
                        datatype: "json",
                        data: JSON.stringify({
                        }),
                        success: (function (result) {
                            console.log(result);
                            this.setState({ data: result });
                        }).bind(this),
                    });


                }).bind(this),
            });
        }
    }

    protected showStatus(item) {
        if (item.TaskStatus === '0') {
            return (
                <button
                    style={{
                        marginTop: "5px"
                    }}
                    className="btn btn-outline-danger btn-sm disabled"
                    // onClick={this.changeStatus.bind(this, item)}
                    disabled>Incomplete</button>
            )
        }
        else if (item.TaskStatus === '1') {
            return (<button
                style={{
                    marginTop: "5px"
                }}
                className="btn btn-outline-success btn-sm disabled"
                // onClick={this.changeStatus.bind(this, item)}
                disabled>Complete</button>)
        }
        else {
            return (
                <button
                    onClick={this.changeStatus.bind(this, item)}
                >?</button>
            )
        }
    }

    protected showTask() {
        window.location.reload();
    }

    protected showStage(stage) {
        if (stage === "0") {
            return "initial"
        }
        else if (stage === "1") {
            return "Bid"
        }
        else if (stage === "2") {
            return "Work Order"
        }
        else if (stage === "3") {
            return "Invoice"
        }
        else if (stage === "4") {
            return "Pending Accounting Review"
        }
        else if (stage === "5") {
            return "Complete"
        }
        else if (stage === '6') {
            return "Archived"
        }
        else {
            return "Terminated"
        }
    }

    protected userProfile() {
        this.props.history.push("/userprofile");
    }

    protected sortTable(value) {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("taskT");
        //console.log(table.rows);
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[3];
                //console.log(rows[i].getElementsByTagName("TD")[1]);
                y = rows[i + 1].getElementsByTagName("TD")[3];
                //check if the two rows should switch place:
                if (this.convertDate(x.innerHTML) > this.convertDate(y.innerHTML)) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }

    }
    protected convertDate(d) {
        var p = d.split("-");
        if (d.indexOf("/") == -1 && d != "") {
            return +(p[0] + p[1] + p[2]);
        }
        else {
            return 99999999;
        }
    }

    protected delUser() {
        this.props.history.push("/deluser");
        // $.ajax({
        //     url: 'https://rpntechserver.appspot.com/removeUser',
        //     headers: {
        //         Authorization: "Bearer " + localStorage.getItem('Token'),
        //     },
        //     method: 'GET',
        //     datatype: "json",
        //     data: JSON.stringify({
        //     }),
        //     success: (function (result) {
        //         console.log(result);
        //         this.setState({ data: result });

        //     }).bind(this),
        // });
    }

    protected showUsername(username) {
        if (username === null) {
            return
        }
        if (username.length == 1) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {void 0}</li>
                    <li>WorkOrder: {void 0}</li>
                    <li>Invoice: {void 0}</li>
                    <li>Pending Account Review: {void 0}</li>
                    <li>Complete: {void 0}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else if (username.length == 2) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {username[1]}</li>
                    <li>WorkOrder: {void 0}</li>
                    <li>Invoice: {void 0}</li>
                    <li>Pending Account Review: {void 0}</li>
                    <li>Complete: {void 0}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else if (username.length == 3) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {username[1]}</li>
                    <li>WorkOrder: {username[2]}</li>
                    <li>Invoice: {void 0}</li>
                    <li>Pending Account Review: {void 0}</li>
                    <li>Complete: {void 0}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else if (username.length == 4) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {username[1]}</li>
                    <li>WorkOrder: {username[2]}</li>
                    <li>Invoice: {username[3]}</li>
                    <li>Pending Account Review: {void 0}</li>
                    <li>Complete: {void 0}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else if (username.length == 5) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {username[1]}</li>
                    <li>WorkOrder: {username[2]}</li>
                    <li>Invoice: {username[3]}</li>
                    <li>Pending Account Review: {username[4]}</li>
                    <li>Complete: {void 0}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else if (username.length == 6) {
            return (
                <React.Fragment>
                    <li>Initial: {username[0]}</li>
                    <li>Bid: {username[1]}</li>
                    <li>WorkOrder: {username[2]}</li>
                    <li>Invoice: {username[3]}</li>
                    <li>Pending Account Review: {username[4]}</li>
                    <li>Complete: {username[5]}</li>
                    <li>Archived: {void 0}</li>
                </React.Fragment>
            )
        }
        else {
            <React.Fragment>
                <li>Initial: {username[0]}</li>
                <li>Bid: {username[1]}</li>
                <li>WorkOrder: {username[2]}</li>
                <li>Invoice: {username[3]}</li>
                <li>Pending Account Review: {username[4]}</li>
                <li>Complete: {username[5]}</li>
                <li>Archived: {username[6]}</li>
            </React.Fragment>
        }
    }

    protected date() {

    }

    protected UserChange(value) {
        console.log(value);
        if (value === 'all') {
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findAllTasks',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });
        }
        else {
            var newname = this.findUserByName(value);
            //console.log(newname);
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/userProfile',
                url: 'http://rpntechserver.appspot.com/getTasksByUser?username=' + newname,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });

                }).bind(this),
            });
        }

    }

    protected findUserByName(name) {
        //console.log(this.state.newUser); tim001
        //console.log(name);
        for (let i = 0; i < this.state.alluser.length; i++) {
            if (this.state.alluser[i].Firstname === name) {
                return this.state.alluser[i].Username;
            }
        }
    }

    protected showSetTask(item) {
        if (localStorage.getItem('Authority') === '2') {
            return <button style={{
                marginRight: '5px',
                marginTop: '5px'
            }} title="setTask" className="btn btn-info btn-sm" onClick={this.setTask.bind(this, item)}><ins>setTask</ins></button>
        }
        else {
            return void 0;
        }
    }

    protected test() {
        this.props.history.push('/test');
    }

    protected setTask(item) {
        localStorage.setItem("currTask", item.TaskID);
        //console.log(item.TaskID);
        this.props.history.push('/setTask');
    }
    protected editTask(item) {
        localStorage.setItem("currTask", item.TaskID);
        localStorage.setItem("currStage", item.Stage);
        //console.log(item.TaskID);
        this.props.history.push('/edittask');
    }

    protected register() {
        this.props.history.push('/register');
    }

    protected delTask(item) {
        //console.log(item.TaskID);
        $.ajax({
            url: 'http://rpntechserver.appspot.com/deleteTask?task_id=' + item.TaskID,
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'POST',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //console.log(result);
                window.location.reload();

            }).bind(this),
        });
    }

    protected search() {
        // var input, filter, table, tr, td, i;
        // input = document.getElementById("myInput");
        // filter = input.value.toUpperCase();

        // table = document.getElementById("taskT");
        // tr = table.getElementsByTagName("tr");
        // for (i = 0; i < tr.length; i++) {
        //     td = tr[i].getElementsByTagName("td")[1];
        //     if (td) {
        //         if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
        //             tr[i].style.display = "";
        //         } else {
        //             tr[i].style.display = "none";
        //         }
        //     }
        // }
        // $(".myInput").on('keyup', function (e) {
        //     if (e.keyCode == 13) {
        //         console.log(123)
        //     }
        // });

    }


    protected addTask() {
        this.props.history.push('/addTask');
    }
}

export default PageGhotiMain;
