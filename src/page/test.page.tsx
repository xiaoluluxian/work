/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiTest
 */

import * as React from 'react';
import * as Component from '../component/import';
import { IItem, IPage } from './interface';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import * as $ from "jquery";

import Config from '../config/config';
import { bootstrap, button } from "bootstrap"

export interface IProps {
    page: IPage;
}

export interface IState {

}

class PageGhotiTest extends React.Component<IProps, IState> {
    state = {
        page: null,
    }
    public constructor(props) {
        super(props);
        this.readJson = this.readJson.bind(this);
        this.sortTable = this.sortTable.bind(this);

    }

    public componentDidMount() {

    }

    public render() {
        return (<React.Fragment>
            <p>Click the button to sort the table alphabetically, by name:</p>
            <p><button onClick={this.sortTable}>Sort</button></p>

            <table id="myTable">
                <tr>
                    <th>Name</th>
                    <th>number</th>
                </tr>
                <tr>
                    <td>Berglunds snabbkop</td>
                    <td>2018-05-03</td>
                </tr>
                <tr>
                    <td>North/South</td>
                    <td>2017-03-16</td>
                </tr>
                <tr>
                    <td>Alfreds Futterkiste</td>
                    <td>2018-05-03</td>
                </tr>
                <tr>
                    <td>Koniglich Essen</td>
                    <td>2018-06-03</td>
                </tr>
                <tr>
                    <td>Magazzini Alimentari Riuniti</td>
                    <td>2018-05-17</td>
                </tr>
                <tr>
                    <td>Paris specialites</td>
                    <td>2018-09-21</td>
                </tr>
                <tr>
                    <td>Island Trading</td>
                    <td>2018-05-14</td>
                </tr>
                <tr>
                    <td>Laughing Bacchus Winecellars</td>
                    <td>2018-08-24</td>
                </tr>
            </table>
            <tr>zipcode <input className="text" id = 'zipcode' ></input></tr>
            <button onClick={this.weather}>go</button>
            </React.Fragment>
        )
    }

    protected weather(){
        $.ajax({
            url: 'http://api.openweathermap.org/data/2.5/weather?zip='+$('#zipcode').val()+'&APPID=bbd1d9fee8d0b99c7470edd713a045f9',
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: function (data) {
                console.log(data);
                
            }.bind(this),
        })
    }

    protected sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("myTable");
        //console.log(table.rows);
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
          //start by saying: no switching is done:
          switching = false;
          rows = table.rows;
          /*Loop through all table rows (except the
          first, which contains table headers):*/
          for (i = 1; i < (rows.length - 1); i++) {
            //start by saying there should be no switching:
            shouldSwitch = false;
            /*Get the two elements you want to compare,
            one from current row and one from the next:*/
            x = rows[i].getElementsByTagName("TD")[1];
            //console.log(rows[i].getElementsByTagName("TD")[1].innerHTML);
            //console.log(rows[i].getElementsByTagName("TD")[1]);
            y = rows[i + 1].getElementsByTagName("TD")[1];
            //check if the two rows should switch place:
            if (this.convertDate(x.innerHTML) > this.convertDate(y.innerHTML)) {
              //if so, mark as a switch and break the loop:
              shouldSwitch = true;
              break;
            }
          }
          if (shouldSwitch) {
            /*If a switch has been marked, make the switch
            and mark that a switch has been done:*/
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
          }
        }
      }

      protected convertDate(d){
        var p = d.split("-");
        return +(p[0]+p[1]+p[2]);
      }

      

    protected readJson(Files: FileList) {
        var file = Files[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            var test = event.target.result;
            var js = JSON.parse(test);
            console.log(js);
            let pagei: IPage = {
                address: js.address,
                assetnum: '',
                startdate: '',
                duedate: '',
                billTo: '',
                city: js.city,
                stage: '',
                invoicenum: '',
                completiondate: '',
                invoicedate: '',
                totalcost: js.totalCost,
                totalimage: parseInt(js.totalImage),
                item: js.list,
            }
            console.log(pagei.address);
            console.log(pagei.totalcost);
            console.log(pagei.totalimage);
            console.log(pagei.item);

        }.bind(this);
        reader.readAsText(file);

    }

    protected init(): IPage {
        return {
            address: '',
            assetnum: '',
            startdate: '',
            duedate: '',
            billTo: '',
            city: '',
            stage: '',
            invoicenum: '',
            completiondate: '',
            invoicedate: '',
            totalcost: '',
            totalimage: 0,
            item: [],
        };
    }
}

export default PageGhotiTest;
