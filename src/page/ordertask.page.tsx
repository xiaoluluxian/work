/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiOrdertask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from './logo';
import { IItem, IPage } from './interface';
import * as $ from "jquery";
import * as fs from 'fs';

import Config from '../config/config';

export interface IProps {
    page: IPage;
    updatePage: (page: IPage, next?: () => void) => void;
    history: any;
}

export interface IState {

}

class PageGhotiOrdertask extends React.Component<IProps, IState> {
    state = {
        data: [],
        alluser: [],
        currUser: '',
        delStatus: '0',
        delProperty: [],
        delAddress:"",
        delTaskID:"",

        Username: "",
        Password: "",
        Email: "",
        Phone: "",
        Firstname: "",
        Lastname: "",
        Authority: "",
        Background: "",
        TaskIds: [],


    };
    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllTasks',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //console.log(result);
                this.setState({ data: result });
            }).bind(this),
        });

        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllUsers',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //console.log(result);
                this.setState({ alluser: result });
            }).bind(this),
        });
        
    }

    public constructor(props) {
        super(props);
        this.submitTask = this.submitTask.bind(this);
        this.changeStatus = this.changeStatus.bind(this);
        this.changeUser = this.changeUser.bind(this);
        this.delTask = this.delTask.bind(this);
        this.addTask = this.addTask.bind(this)

    }

    public render() {
        return (<div className="main">
            <div className="title">
                <div style={{
                    display: 'flex',
                    height: '100px',
                    alignItems: 'center',
                    width: '100%'
                }}>
                    <img src={logo} alt="logo" style={{
                        width: '70px',
                        height: '50px',
                    }} />
                    <div style={{
                        flex: 1,
                        paddingLeft: '10px',
                        paddingTop: '20px',
                        display: 'inline',
                        fontSize: '20px',
                        color: 'darkblue',
                        fontWeight: 'bold',
                    }}>
                        Repair and Preservation Network, LLC
            </div>
                </div>
            </div>
            <div className="space">
                <div style={{
                    alignItems: 'center',
                    textAlign: 'center',
                    marginTop: '10px',
                    width: '100%',
                }}>
                    Welcome to Repair and Preservation Network Company!
            </div>
            </div>
            <div className="menu">
                <div style={{
                    margin: '15px',
                }}>
                    <button className="link" title="View Task" onClick={this.changeStatus}><ins>View Task</ins></button>
                </div></div>

            <div style={{
                marginLeft: '10px',
                marginTop: '5px'
                // marginRight:'10px'
            }}>User:
                    <select style={{ marginLeft: '10px' }} id='setUser' onChange={e => { this.changeUser(e.target.value) }}>
                    <option>all</option>
                    {this.state.alluser.map(function (item, key) {
                        return (
                            <option>{item.Username}</option>
                        )
                    }.bind(this))}
                </select>
            </div>
            <div style={{
                marginLeft: '10px',
                marginTop: '5px'
                // marginRight:'10px'
            }}>Address To Change:{this.state.delAddress}</div>
            <table className="table table-striped table-hover table-bordered table-sm" id='taskT'>
                <thead>
                    <tr>
                        {/* <th></th> */}
                        <th>Action</th>
                        <th>Property Address</th>
                        <th>key</th>
                        {/* <th>Asset Number</th>
                            <th>Due Date</th>
                            <th>User</th>
                            <th>CurrStage</th>
                            <th>Status</th> */}
                    </tr>
                </thead>
                <tbody>{this.state.data.map(function (item, key) {

                    if (this.state.delStatus === '0') {
                        return (
                            <tr key={key}>
                                <td><button style={{
                                    marginRight: '5px',
                                    marginTop: '5px'
                                }} title="del" className="btn btn-primary btn-sm" onClick={this.delTask.bind(this, item,key)}><ins>Del</ins></button>

                                </td>
                                <td>{item.Address}</td>
                                <td>{key}</td>

                            </tr>
                        )
                    }
                    else {
                        return (
                            <tr key={key}>
                                <td><button style={{
                                    marginRight: '5px',
                                    marginTop: '5px'
                                }} title="add" className="btn btn-primary btn-sm" onClick={this.addTask.bind(this, item, key)}><ins>Add</ins></button>

                                </td>
                                <td>{item.Address}</td>
                                <td>{key}</td>

                            </tr>
                        )
                    }
                }.bind(this))
                }
                </tbody>
            </table>
            <button
                style={{
                    marginLeft: '10px',
                    marginTop: '5px',
                    width: '60px',
                    height: '28px',
                    fontSize: '14px',
                }}
                title="Submit Task" onClick={this.submitTask}><ins>Submit</ins></button>
            {/* <input
                style={{
                    marginTop: '10px',
                    marginLeft: '10px',
                    width: '60px',
                    height: '25px',
                    fontSize: '14px',
                }}
                type="file" id="fileUpload" onChange={(e) => { this.handleChange(e.target.files) }} /> */}
        </div>);

    }

    protected addTask(item,key) {
        let tasks = this.state.data;
        let taskid = this.state.TaskIds;
        tasks.splice(key,0,this.state.delProperty);
        taskid.splice(key,0,this.state.delTaskID);
        this.setState({data:tasks});
        this.setState({TaskIds:taskid});
        this.setState({delStatus:'0'});
        this.setState({delProperty:[]});
        this.setState({delAddress:""});
        console.log(this.state.TaskIds);
    }

    protected delTask(item,key) {
        console.log(item);
        this.setState({delProperty:item});
        this.setState({delAddress:item.Address});
        this.setState({delTaskID:item.TaskID});
        let tasks = this.state.data;
        let taskid = this.state.TaskIds;
        tasks.splice(key,1);
        taskid.splice(key,1);
        this.setState({data:tasks});
        this.setState({delStatus:'1'});
        this.setState({TaskIds:taskid});
        // console.log(item);
    }

    protected changeUser(user) {
        // console.log(user);
        this.setState({delStatus:'0'});
        this.setState({delProperty:[]});
        this.setState({delAddress:""});
        this.setState({currUser:user});
        if(user==="all"){
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findAllTasks',
    
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });
                }).bind(this),
            });
        }
        else{
            $.ajax({
                url: 'https://rpntechserver.appspot.com/findUserByUsername?username=' + user,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    console.log(result.TaskIds);
                    this.setState({ Username: result.Username });
                    this.setState({ Password: result.Password });
                    this.setState({ Email: result.Email });
                    this.setState({ Firstname: result.Firstname });
                    this.setState({ Lastname: result.Lastname });
                    this.setState({ Phone: result.Phone });
                    this.setState({ Authority: result.Authority });
                    this.setState({ Background: result.Background });
                    this.setState({ TaskIds: result.TaskIds });
    
                }).bind(this),
            });
            $.ajax({
                //url: 'https://rpntechserver.appspot.com/userProfile',
                url: 'http://rpntechserver.appspot.com/getTasksByUser?username=' + user,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'GET',
                datatype: "json",
                data: JSON.stringify({
                }),
                success: (function (result) {
                    //console.log(result);
                    this.setState({ data: result });
    
                }).bind(this),
            });
        }
        
    }

    protected changeStatus() {
        this.props.history.push('/main');
    }


    protected submitTask() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateUser',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'POST',
            datatype: "json",
            data: JSON.stringify({
                Username:this.state.currUser,
                Password:this.state.Password,
                Authority: this.state.Authority,
                Email: this.state.Email,
                Phone: this.state.Phone,
                Firstname: this.state.Firstname,
                Lastname: this.state.Lastname,
                Background: this.state.Background,
                TaskIds: this.state.TaskIds
            }),
            success: (function (result) {
                this.props.history.push("/main");
            }).bind(this),
        });
    }
}

export default PageGhotiOrdertask;